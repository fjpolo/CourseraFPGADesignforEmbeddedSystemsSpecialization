// core_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module core_mm_interconnect_0 (
		input  wire        altpll_0_c0_clk,                                      //                                    altpll_0_c0.clk
		input  wire        altpll_0_c2_clk,                                      //                                    altpll_0_c2.clk
		input  wire        clk_1_clk_clk,                                        //                                      clk_1_clk.clk
		input  wire        jtag_uart_0_reset_reset_bridge_in_reset_reset,        //        jtag_uart_0_reset_reset_bridge_in_reset.reset
		input  wire        modular_adc_0_reset_sink_reset_bridge_in_reset_reset, // modular_adc_0_reset_sink_reset_bridge_in_reset.reset
		input  wire        nios2_gen2_0_reset_reset_bridge_in_reset_reset,       //       nios2_gen2_0_reset_reset_bridge_in_reset.reset
		input  wire [22:0] nios2_gen2_0_data_master_address,                     //                       nios2_gen2_0_data_master.address
		output wire        nios2_gen2_0_data_master_waitrequest,                 //                                               .waitrequest
		input  wire [3:0]  nios2_gen2_0_data_master_byteenable,                  //                                               .byteenable
		input  wire        nios2_gen2_0_data_master_read,                        //                                               .read
		output wire [31:0] nios2_gen2_0_data_master_readdata,                    //                                               .readdata
		output wire        nios2_gen2_0_data_master_readdatavalid,               //                                               .readdatavalid
		input  wire        nios2_gen2_0_data_master_write,                       //                                               .write
		input  wire [31:0] nios2_gen2_0_data_master_writedata,                   //                                               .writedata
		input  wire        nios2_gen2_0_data_master_debugaccess,                 //                                               .debugaccess
		input  wire [21:0] nios2_gen2_0_instruction_master_address,              //                nios2_gen2_0_instruction_master.address
		output wire        nios2_gen2_0_instruction_master_waitrequest,          //                                               .waitrequest
		input  wire        nios2_gen2_0_instruction_master_read,                 //                                               .read
		output wire [31:0] nios2_gen2_0_instruction_master_readdata,             //                                               .readdata
		output wire        nios2_gen2_0_instruction_master_readdatavalid,        //                                               .readdatavalid
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,                //                  jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,                  //                                               .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,                   //                                               .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,               //                                               .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,              //                                               .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,            //                                               .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,             //                                               .chipselect
		output wire [6:0]  modular_adc_0_sample_store_csr_address,               //                 modular_adc_0_sample_store_csr.address
		output wire        modular_adc_0_sample_store_csr_write,                 //                                               .write
		output wire        modular_adc_0_sample_store_csr_read,                  //                                               .read
		input  wire [31:0] modular_adc_0_sample_store_csr_readdata,              //                                               .readdata
		output wire [31:0] modular_adc_0_sample_store_csr_writedata,             //                                               .writedata
		output wire [0:0]  modular_adc_0_sequencer_csr_address,                  //                    modular_adc_0_sequencer_csr.address
		output wire        modular_adc_0_sequencer_csr_write,                    //                                               .write
		output wire        modular_adc_0_sequencer_csr_read,                     //                                               .read
		input  wire [31:0] modular_adc_0_sequencer_csr_readdata,                 //                                               .readdata
		output wire [31:0] modular_adc_0_sequencer_csr_writedata,                //                                               .writedata
		output wire [8:0]  nios2_gen2_0_debug_mem_slave_address,                 //                   nios2_gen2_0_debug_mem_slave.address
		output wire        nios2_gen2_0_debug_mem_slave_write,                   //                                               .write
		output wire        nios2_gen2_0_debug_mem_slave_read,                    //                                               .read
		input  wire [31:0] nios2_gen2_0_debug_mem_slave_readdata,                //                                               .readdata
		output wire [31:0] nios2_gen2_0_debug_mem_slave_writedata,               //                                               .writedata
		output wire [3:0]  nios2_gen2_0_debug_mem_slave_byteenable,              //                                               .byteenable
		input  wire        nios2_gen2_0_debug_mem_slave_waitrequest,             //                                               .waitrequest
		output wire        nios2_gen2_0_debug_mem_slave_debugaccess,             //                                               .debugaccess
		output wire [0:0]  onchip_flash_0_csr_address,                           //                             onchip_flash_0_csr.address
		output wire        onchip_flash_0_csr_write,                             //                                               .write
		output wire        onchip_flash_0_csr_read,                              //                                               .read
		input  wire [31:0] onchip_flash_0_csr_readdata,                          //                                               .readdata
		output wire [31:0] onchip_flash_0_csr_writedata,                         //                                               .writedata
		output wire [18:0] onchip_flash_0_data_address,                          //                            onchip_flash_0_data.address
		output wire        onchip_flash_0_data_write,                            //                                               .write
		output wire        onchip_flash_0_data_read,                             //                                               .read
		input  wire [31:0] onchip_flash_0_data_readdata,                         //                                               .readdata
		output wire [31:0] onchip_flash_0_data_writedata,                        //                                               .writedata
		output wire [3:0]  onchip_flash_0_data_burstcount,                       //                                               .burstcount
		input  wire        onchip_flash_0_data_readdatavalid,                    //                                               .readdatavalid
		input  wire        onchip_flash_0_data_waitrequest,                      //                                               .waitrequest
		output wire [11:0] onchip_memory2_0_s1_address,                          //                            onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                            //                                               .write
		input  wire [31:0] onchip_memory2_0_s1_readdata,                         //                                               .readdata
		output wire [31:0] onchip_memory2_0_s1_writedata,                        //                                               .writedata
		output wire [3:0]  onchip_memory2_0_s1_byteenable,                       //                                               .byteenable
		output wire        onchip_memory2_0_s1_chipselect,                       //                                               .chipselect
		output wire        onchip_memory2_0_s1_clken,                            //                                               .clken
		output wire [1:0]  pio_0_s1_address,                                     //                                       pio_0_s1.address
		output wire        pio_0_s1_write,                                       //                                               .write
		input  wire [31:0] pio_0_s1_readdata,                                    //                                               .readdata
		output wire [31:0] pio_0_s1_writedata,                                   //                                               .writedata
		output wire        pio_0_s1_chipselect,                                  //                                               .chipselect
		output wire [1:0]  slide_pio_s1_address,                                 //                                   slide_pio_s1.address
		output wire        slide_pio_s1_write,                                   //                                               .write
		input  wire [31:0] slide_pio_s1_readdata,                                //                                               .readdata
		output wire [31:0] slide_pio_s1_writedata,                               //                                               .writedata
		output wire        slide_pio_s1_chipselect,                              //                                               .chipselect
		output wire [0:0]  sysid_qsys_0_control_slave_address,                   //                     sysid_qsys_0_control_slave.address
		input  wire [31:0] sysid_qsys_0_control_slave_readdata,                  //                                               .readdata
		output wire [2:0]  timer_0_s1_address,                                   //                                     timer_0_s1.address
		output wire        timer_0_s1_write,                                     //                                               .write
		input  wire [15:0] timer_0_s1_readdata,                                  //                                               .readdata
		output wire [15:0] timer_0_s1_writedata,                                 //                                               .writedata
		output wire        timer_0_s1_chipselect                                 //                                               .chipselect
	);

	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_gen2_0_data_master_agent:av_waitrequest -> nios2_gen2_0_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata;             // nios2_gen2_0_data_master_agent:av_readdata -> nios2_gen2_0_data_master_translator:uav_readdata
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_gen2_0_data_master_translator:uav_debugaccess -> nios2_gen2_0_data_master_agent:av_debugaccess
	wire   [22:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_address;              // nios2_gen2_0_data_master_translator:uav_address -> nios2_gen2_0_data_master_agent:av_address
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_read;                 // nios2_gen2_0_data_master_translator:uav_read -> nios2_gen2_0_data_master_agent:av_read
	wire    [3:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_gen2_0_data_master_translator:uav_byteenable -> nios2_gen2_0_data_master_agent:av_byteenable
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_gen2_0_data_master_agent:av_readdatavalid -> nios2_gen2_0_data_master_translator:uav_readdatavalid
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock;                 // nios2_gen2_0_data_master_translator:uav_lock -> nios2_gen2_0_data_master_agent:av_lock
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_write;                // nios2_gen2_0_data_master_translator:uav_write -> nios2_gen2_0_data_master_agent:av_write
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata;            // nios2_gen2_0_data_master_translator:uav_writedata -> nios2_gen2_0_data_master_agent:av_writedata
	wire    [2:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_gen2_0_data_master_translator:uav_burstcount -> nios2_gen2_0_data_master_agent:av_burstcount
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_gen2_0_instruction_master_agent:av_waitrequest -> nios2_gen2_0_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_gen2_0_instruction_master_agent:av_readdata -> nios2_gen2_0_instruction_master_translator:uav_readdata
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_gen2_0_instruction_master_translator:uav_debugaccess -> nios2_gen2_0_instruction_master_agent:av_debugaccess
	wire   [22:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address;       // nios2_gen2_0_instruction_master_translator:uav_address -> nios2_gen2_0_instruction_master_agent:av_address
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read;          // nios2_gen2_0_instruction_master_translator:uav_read -> nios2_gen2_0_instruction_master_agent:av_read
	wire    [3:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_gen2_0_instruction_master_translator:uav_byteenable -> nios2_gen2_0_instruction_master_agent:av_byteenable
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_gen2_0_instruction_master_agent:av_readdatavalid -> nios2_gen2_0_instruction_master_translator:uav_readdatavalid
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_gen2_0_instruction_master_translator:uav_lock -> nios2_gen2_0_instruction_master_agent:av_lock
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write;         // nios2_gen2_0_instruction_master_translator:uav_write -> nios2_gen2_0_instruction_master_agent:av_write
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_gen2_0_instruction_master_translator:uav_writedata -> nios2_gen2_0_instruction_master_agent:av_writedata
	wire    [2:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_gen2_0_instruction_master_translator:uav_burstcount -> nios2_gen2_0_instruction_master_agent:av_burstcount
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                                    // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                                 // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                                 // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [22:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                                     // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                               // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                                   // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                                       // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                                // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [104:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                                 // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                                // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;                        // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;                          // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                             // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [104:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                              // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                             // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                     // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                       // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                           // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                            // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                           // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                                  // cmd_mux:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire  [103:0] cmd_mux_src_data;                                                                   // cmd_mux:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                                  // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [10:0] cmd_mux_src_channel;                                                                // cmd_mux:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                          // cmd_mux:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                            // cmd_mux:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_readdata;                                       // sysid_qsys_0_control_slave_translator:uav_readdata -> sysid_qsys_0_control_slave_agent:m0_readdata
	wire          sysid_qsys_0_control_slave_agent_m0_waitrequest;                                    // sysid_qsys_0_control_slave_translator:uav_waitrequest -> sysid_qsys_0_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_0_control_slave_agent_m0_debugaccess;                                    // sysid_qsys_0_control_slave_agent:m0_debugaccess -> sysid_qsys_0_control_slave_translator:uav_debugaccess
	wire   [22:0] sysid_qsys_0_control_slave_agent_m0_address;                                        // sysid_qsys_0_control_slave_agent:m0_address -> sysid_qsys_0_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_0_control_slave_agent_m0_byteenable;                                     // sysid_qsys_0_control_slave_agent:m0_byteenable -> sysid_qsys_0_control_slave_translator:uav_byteenable
	wire          sysid_qsys_0_control_slave_agent_m0_read;                                           // sysid_qsys_0_control_slave_agent:m0_read -> sysid_qsys_0_control_slave_translator:uav_read
	wire          sysid_qsys_0_control_slave_agent_m0_readdatavalid;                                  // sysid_qsys_0_control_slave_translator:uav_readdatavalid -> sysid_qsys_0_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_0_control_slave_agent_m0_lock;                                           // sysid_qsys_0_control_slave_agent:m0_lock -> sysid_qsys_0_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_writedata;                                      // sysid_qsys_0_control_slave_agent:m0_writedata -> sysid_qsys_0_control_slave_translator:uav_writedata
	wire          sysid_qsys_0_control_slave_agent_m0_write;                                          // sysid_qsys_0_control_slave_agent:m0_write -> sysid_qsys_0_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_0_control_slave_agent_m0_burstcount;                                     // sysid_qsys_0_control_slave_agent:m0_burstcount -> sysid_qsys_0_control_slave_translator:uav_burstcount
	wire          sysid_qsys_0_control_slave_agent_rf_source_valid;                                   // sysid_qsys_0_control_slave_agent:rf_source_valid -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_valid
	wire  [104:0] sysid_qsys_0_control_slave_agent_rf_source_data;                                    // sysid_qsys_0_control_slave_agent:rf_source_data -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_0_control_slave_agent_rf_source_ready;                                   // sysid_qsys_0_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rf_source_ready
	wire          sysid_qsys_0_control_slave_agent_rf_source_startofpacket;                           // sysid_qsys_0_control_slave_agent:rf_source_startofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rf_source_endofpacket;                             // sysid_qsys_0_control_slave_agent:rf_source_endofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid;                                // sysid_qsys_0_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_0_control_slave_agent:rf_sink_valid
	wire  [104:0] sysid_qsys_0_control_slave_agent_rsp_fifo_out_data;                                 // sysid_qsys_0_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_0_control_slave_agent:rf_sink_data
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready;                                // sysid_qsys_0_control_slave_agent:rf_sink_ready -> sysid_qsys_0_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket;                        // sysid_qsys_0_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket;                          // sysid_qsys_0_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid;                              // sysid_qsys_0_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_0_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_src_data;                               // sysid_qsys_0_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_0_control_slave_agent_rdata_fifo:in_data
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready;                              // sysid_qsys_0_control_slave_agent_rdata_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                              // cmd_mux_001:src_valid -> sysid_qsys_0_control_slave_agent:cp_valid
	wire  [103:0] cmd_mux_001_src_data;                                                               // cmd_mux_001:src_data -> sysid_qsys_0_control_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                              // sysid_qsys_0_control_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [10:0] cmd_mux_001_src_channel;                                                            // cmd_mux_001:src_channel -> sysid_qsys_0_control_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                      // cmd_mux_001:src_startofpacket -> sysid_qsys_0_control_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                        // cmd_mux_001:src_endofpacket -> sysid_qsys_0_control_slave_agent:cp_endofpacket
	wire   [31:0] onchip_flash_0_csr_agent_m0_readdata;                                               // onchip_flash_0_csr_translator:uav_readdata -> onchip_flash_0_csr_agent:m0_readdata
	wire          onchip_flash_0_csr_agent_m0_waitrequest;                                            // onchip_flash_0_csr_translator:uav_waitrequest -> onchip_flash_0_csr_agent:m0_waitrequest
	wire          onchip_flash_0_csr_agent_m0_debugaccess;                                            // onchip_flash_0_csr_agent:m0_debugaccess -> onchip_flash_0_csr_translator:uav_debugaccess
	wire   [22:0] onchip_flash_0_csr_agent_m0_address;                                                // onchip_flash_0_csr_agent:m0_address -> onchip_flash_0_csr_translator:uav_address
	wire    [3:0] onchip_flash_0_csr_agent_m0_byteenable;                                             // onchip_flash_0_csr_agent:m0_byteenable -> onchip_flash_0_csr_translator:uav_byteenable
	wire          onchip_flash_0_csr_agent_m0_read;                                                   // onchip_flash_0_csr_agent:m0_read -> onchip_flash_0_csr_translator:uav_read
	wire          onchip_flash_0_csr_agent_m0_readdatavalid;                                          // onchip_flash_0_csr_translator:uav_readdatavalid -> onchip_flash_0_csr_agent:m0_readdatavalid
	wire          onchip_flash_0_csr_agent_m0_lock;                                                   // onchip_flash_0_csr_agent:m0_lock -> onchip_flash_0_csr_translator:uav_lock
	wire   [31:0] onchip_flash_0_csr_agent_m0_writedata;                                              // onchip_flash_0_csr_agent:m0_writedata -> onchip_flash_0_csr_translator:uav_writedata
	wire          onchip_flash_0_csr_agent_m0_write;                                                  // onchip_flash_0_csr_agent:m0_write -> onchip_flash_0_csr_translator:uav_write
	wire    [2:0] onchip_flash_0_csr_agent_m0_burstcount;                                             // onchip_flash_0_csr_agent:m0_burstcount -> onchip_flash_0_csr_translator:uav_burstcount
	wire          onchip_flash_0_csr_agent_rf_source_valid;                                           // onchip_flash_0_csr_agent:rf_source_valid -> onchip_flash_0_csr_agent_rsp_fifo:in_valid
	wire  [104:0] onchip_flash_0_csr_agent_rf_source_data;                                            // onchip_flash_0_csr_agent:rf_source_data -> onchip_flash_0_csr_agent_rsp_fifo:in_data
	wire          onchip_flash_0_csr_agent_rf_source_ready;                                           // onchip_flash_0_csr_agent_rsp_fifo:in_ready -> onchip_flash_0_csr_agent:rf_source_ready
	wire          onchip_flash_0_csr_agent_rf_source_startofpacket;                                   // onchip_flash_0_csr_agent:rf_source_startofpacket -> onchip_flash_0_csr_agent_rsp_fifo:in_startofpacket
	wire          onchip_flash_0_csr_agent_rf_source_endofpacket;                                     // onchip_flash_0_csr_agent:rf_source_endofpacket -> onchip_flash_0_csr_agent_rsp_fifo:in_endofpacket
	wire          onchip_flash_0_csr_agent_rsp_fifo_out_valid;                                        // onchip_flash_0_csr_agent_rsp_fifo:out_valid -> onchip_flash_0_csr_agent:rf_sink_valid
	wire  [104:0] onchip_flash_0_csr_agent_rsp_fifo_out_data;                                         // onchip_flash_0_csr_agent_rsp_fifo:out_data -> onchip_flash_0_csr_agent:rf_sink_data
	wire          onchip_flash_0_csr_agent_rsp_fifo_out_ready;                                        // onchip_flash_0_csr_agent:rf_sink_ready -> onchip_flash_0_csr_agent_rsp_fifo:out_ready
	wire          onchip_flash_0_csr_agent_rsp_fifo_out_startofpacket;                                // onchip_flash_0_csr_agent_rsp_fifo:out_startofpacket -> onchip_flash_0_csr_agent:rf_sink_startofpacket
	wire          onchip_flash_0_csr_agent_rsp_fifo_out_endofpacket;                                  // onchip_flash_0_csr_agent_rsp_fifo:out_endofpacket -> onchip_flash_0_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                              // cmd_mux_002:src_valid -> onchip_flash_0_csr_agent:cp_valid
	wire  [103:0] cmd_mux_002_src_data;                                                               // cmd_mux_002:src_data -> onchip_flash_0_csr_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                              // onchip_flash_0_csr_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [10:0] cmd_mux_002_src_channel;                                                            // cmd_mux_002:src_channel -> onchip_flash_0_csr_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                      // cmd_mux_002:src_startofpacket -> onchip_flash_0_csr_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                        // cmd_mux_002:src_endofpacket -> onchip_flash_0_csr_agent:cp_endofpacket
	wire   [31:0] onchip_flash_0_data_agent_m0_readdata;                                              // onchip_flash_0_data_translator:uav_readdata -> onchip_flash_0_data_agent:m0_readdata
	wire          onchip_flash_0_data_agent_m0_waitrequest;                                           // onchip_flash_0_data_translator:uav_waitrequest -> onchip_flash_0_data_agent:m0_waitrequest
	wire          onchip_flash_0_data_agent_m0_debugaccess;                                           // onchip_flash_0_data_agent:m0_debugaccess -> onchip_flash_0_data_translator:uav_debugaccess
	wire   [22:0] onchip_flash_0_data_agent_m0_address;                                               // onchip_flash_0_data_agent:m0_address -> onchip_flash_0_data_translator:uav_address
	wire    [3:0] onchip_flash_0_data_agent_m0_byteenable;                                            // onchip_flash_0_data_agent:m0_byteenable -> onchip_flash_0_data_translator:uav_byteenable
	wire          onchip_flash_0_data_agent_m0_read;                                                  // onchip_flash_0_data_agent:m0_read -> onchip_flash_0_data_translator:uav_read
	wire          onchip_flash_0_data_agent_m0_readdatavalid;                                         // onchip_flash_0_data_translator:uav_readdatavalid -> onchip_flash_0_data_agent:m0_readdatavalid
	wire          onchip_flash_0_data_agent_m0_lock;                                                  // onchip_flash_0_data_agent:m0_lock -> onchip_flash_0_data_translator:uav_lock
	wire   [31:0] onchip_flash_0_data_agent_m0_writedata;                                             // onchip_flash_0_data_agent:m0_writedata -> onchip_flash_0_data_translator:uav_writedata
	wire          onchip_flash_0_data_agent_m0_write;                                                 // onchip_flash_0_data_agent:m0_write -> onchip_flash_0_data_translator:uav_write
	wire    [5:0] onchip_flash_0_data_agent_m0_burstcount;                                            // onchip_flash_0_data_agent:m0_burstcount -> onchip_flash_0_data_translator:uav_burstcount
	wire          onchip_flash_0_data_agent_rf_source_valid;                                          // onchip_flash_0_data_agent:rf_source_valid -> onchip_flash_0_data_agent_rsp_fifo:in_valid
	wire  [104:0] onchip_flash_0_data_agent_rf_source_data;                                           // onchip_flash_0_data_agent:rf_source_data -> onchip_flash_0_data_agent_rsp_fifo:in_data
	wire          onchip_flash_0_data_agent_rf_source_ready;                                          // onchip_flash_0_data_agent_rsp_fifo:in_ready -> onchip_flash_0_data_agent:rf_source_ready
	wire          onchip_flash_0_data_agent_rf_source_startofpacket;                                  // onchip_flash_0_data_agent:rf_source_startofpacket -> onchip_flash_0_data_agent_rsp_fifo:in_startofpacket
	wire          onchip_flash_0_data_agent_rf_source_endofpacket;                                    // onchip_flash_0_data_agent:rf_source_endofpacket -> onchip_flash_0_data_agent_rsp_fifo:in_endofpacket
	wire          onchip_flash_0_data_agent_rsp_fifo_out_valid;                                       // onchip_flash_0_data_agent_rsp_fifo:out_valid -> onchip_flash_0_data_agent:rf_sink_valid
	wire  [104:0] onchip_flash_0_data_agent_rsp_fifo_out_data;                                        // onchip_flash_0_data_agent_rsp_fifo:out_data -> onchip_flash_0_data_agent:rf_sink_data
	wire          onchip_flash_0_data_agent_rsp_fifo_out_ready;                                       // onchip_flash_0_data_agent:rf_sink_ready -> onchip_flash_0_data_agent_rsp_fifo:out_ready
	wire          onchip_flash_0_data_agent_rsp_fifo_out_startofpacket;                               // onchip_flash_0_data_agent_rsp_fifo:out_startofpacket -> onchip_flash_0_data_agent:rf_sink_startofpacket
	wire          onchip_flash_0_data_agent_rsp_fifo_out_endofpacket;                                 // onchip_flash_0_data_agent_rsp_fifo:out_endofpacket -> onchip_flash_0_data_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                              // cmd_mux_003:src_valid -> onchip_flash_0_data_agent:cp_valid
	wire  [103:0] cmd_mux_003_src_data;                                                               // cmd_mux_003:src_data -> onchip_flash_0_data_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                              // onchip_flash_0_data_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [10:0] cmd_mux_003_src_channel;                                                            // cmd_mux_003:src_channel -> onchip_flash_0_data_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                      // cmd_mux_003:src_startofpacket -> onchip_flash_0_data_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                        // cmd_mux_003:src_endofpacket -> onchip_flash_0_data_agent:cp_endofpacket
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_readdata;                                     // nios2_gen2_0_debug_mem_slave_translator:uav_readdata -> nios2_gen2_0_debug_mem_slave_agent:m0_readdata
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest;                                  // nios2_gen2_0_debug_mem_slave_translator:uav_waitrequest -> nios2_gen2_0_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess;                                  // nios2_gen2_0_debug_mem_slave_agent:m0_debugaccess -> nios2_gen2_0_debug_mem_slave_translator:uav_debugaccess
	wire   [22:0] nios2_gen2_0_debug_mem_slave_agent_m0_address;                                      // nios2_gen2_0_debug_mem_slave_agent:m0_address -> nios2_gen2_0_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_gen2_0_debug_mem_slave_agent_m0_byteenable;                                   // nios2_gen2_0_debug_mem_slave_agent:m0_byteenable -> nios2_gen2_0_debug_mem_slave_translator:uav_byteenable
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_read;                                         // nios2_gen2_0_debug_mem_slave_agent:m0_read -> nios2_gen2_0_debug_mem_slave_translator:uav_read
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid;                                // nios2_gen2_0_debug_mem_slave_translator:uav_readdatavalid -> nios2_gen2_0_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_lock;                                         // nios2_gen2_0_debug_mem_slave_agent:m0_lock -> nios2_gen2_0_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_writedata;                                    // nios2_gen2_0_debug_mem_slave_agent:m0_writedata -> nios2_gen2_0_debug_mem_slave_translator:uav_writedata
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_write;                                        // nios2_gen2_0_debug_mem_slave_agent:m0_write -> nios2_gen2_0_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_gen2_0_debug_mem_slave_agent_m0_burstcount;                                   // nios2_gen2_0_debug_mem_slave_agent:m0_burstcount -> nios2_gen2_0_debug_mem_slave_translator:uav_burstcount
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_valid;                                 // nios2_gen2_0_debug_mem_slave_agent:rf_source_valid -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [104:0] nios2_gen2_0_debug_mem_slave_agent_rf_source_data;                                  // nios2_gen2_0_debug_mem_slave_agent:rf_source_data -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_ready;                                 // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_gen2_0_debug_mem_slave_agent:rf_source_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket;                         // nios2_gen2_0_debug_mem_slave_agent:rf_source_startofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket;                           // nios2_gen2_0_debug_mem_slave_agent:rf_source_endofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid;                              // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_valid
	wire  [104:0] nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data;                               // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready;                              // nios2_gen2_0_debug_mem_slave_agent:rf_sink_ready -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                              // cmd_mux_004:src_valid -> nios2_gen2_0_debug_mem_slave_agent:cp_valid
	wire  [103:0] cmd_mux_004_src_data;                                                               // cmd_mux_004:src_data -> nios2_gen2_0_debug_mem_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                              // nios2_gen2_0_debug_mem_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [10:0] cmd_mux_004_src_channel;                                                            // cmd_mux_004:src_channel -> nios2_gen2_0_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                      // cmd_mux_004:src_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                        // cmd_mux_004:src_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] onchip_memory2_0_s1_agent_m0_readdata;                                              // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire          onchip_memory2_0_s1_agent_m0_waitrequest;                                           // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire          onchip_memory2_0_s1_agent_m0_debugaccess;                                           // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire   [22:0] onchip_memory2_0_s1_agent_m0_address;                                               // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire    [3:0] onchip_memory2_0_s1_agent_m0_byteenable;                                            // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_agent_m0_read;                                                  // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire          onchip_memory2_0_s1_agent_m0_readdatavalid;                                         // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_agent_m0_lock;                                                  // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire   [31:0] onchip_memory2_0_s1_agent_m0_writedata;                                             // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire          onchip_memory2_0_s1_agent_m0_write;                                                 // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire    [2:0] onchip_memory2_0_s1_agent_m0_burstcount;                                            // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire          onchip_memory2_0_s1_agent_rf_source_valid;                                          // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire  [104:0] onchip_memory2_0_s1_agent_rf_source_data;                                           // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rf_source_ready;                                          // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire          onchip_memory2_0_s1_agent_rf_source_startofpacket;                                  // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rf_source_endofpacket;                                    // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                                       // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire  [104:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                                        // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                                       // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                               // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                                 // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                              // cmd_mux_005:src_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire  [103:0] cmd_mux_005_src_data;                                                               // cmd_mux_005:src_data -> onchip_memory2_0_s1_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                              // onchip_memory2_0_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [10:0] cmd_mux_005_src_channel;                                                            // cmd_mux_005:src_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                      // cmd_mux_005:src_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                        // cmd_mux_005:src_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire   [31:0] slide_pio_s1_agent_m0_readdata;                                                     // slide_pio_s1_translator:uav_readdata -> slide_pio_s1_agent:m0_readdata
	wire          slide_pio_s1_agent_m0_waitrequest;                                                  // slide_pio_s1_translator:uav_waitrequest -> slide_pio_s1_agent:m0_waitrequest
	wire          slide_pio_s1_agent_m0_debugaccess;                                                  // slide_pio_s1_agent:m0_debugaccess -> slide_pio_s1_translator:uav_debugaccess
	wire   [22:0] slide_pio_s1_agent_m0_address;                                                      // slide_pio_s1_agent:m0_address -> slide_pio_s1_translator:uav_address
	wire    [3:0] slide_pio_s1_agent_m0_byteenable;                                                   // slide_pio_s1_agent:m0_byteenable -> slide_pio_s1_translator:uav_byteenable
	wire          slide_pio_s1_agent_m0_read;                                                         // slide_pio_s1_agent:m0_read -> slide_pio_s1_translator:uav_read
	wire          slide_pio_s1_agent_m0_readdatavalid;                                                // slide_pio_s1_translator:uav_readdatavalid -> slide_pio_s1_agent:m0_readdatavalid
	wire          slide_pio_s1_agent_m0_lock;                                                         // slide_pio_s1_agent:m0_lock -> slide_pio_s1_translator:uav_lock
	wire   [31:0] slide_pio_s1_agent_m0_writedata;                                                    // slide_pio_s1_agent:m0_writedata -> slide_pio_s1_translator:uav_writedata
	wire          slide_pio_s1_agent_m0_write;                                                        // slide_pio_s1_agent:m0_write -> slide_pio_s1_translator:uav_write
	wire    [2:0] slide_pio_s1_agent_m0_burstcount;                                                   // slide_pio_s1_agent:m0_burstcount -> slide_pio_s1_translator:uav_burstcount
	wire          slide_pio_s1_agent_rf_source_valid;                                                 // slide_pio_s1_agent:rf_source_valid -> slide_pio_s1_agent_rsp_fifo:in_valid
	wire  [104:0] slide_pio_s1_agent_rf_source_data;                                                  // slide_pio_s1_agent:rf_source_data -> slide_pio_s1_agent_rsp_fifo:in_data
	wire          slide_pio_s1_agent_rf_source_ready;                                                 // slide_pio_s1_agent_rsp_fifo:in_ready -> slide_pio_s1_agent:rf_source_ready
	wire          slide_pio_s1_agent_rf_source_startofpacket;                                         // slide_pio_s1_agent:rf_source_startofpacket -> slide_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          slide_pio_s1_agent_rf_source_endofpacket;                                           // slide_pio_s1_agent:rf_source_endofpacket -> slide_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          slide_pio_s1_agent_rsp_fifo_out_valid;                                              // slide_pio_s1_agent_rsp_fifo:out_valid -> slide_pio_s1_agent:rf_sink_valid
	wire  [104:0] slide_pio_s1_agent_rsp_fifo_out_data;                                               // slide_pio_s1_agent_rsp_fifo:out_data -> slide_pio_s1_agent:rf_sink_data
	wire          slide_pio_s1_agent_rsp_fifo_out_ready;                                              // slide_pio_s1_agent:rf_sink_ready -> slide_pio_s1_agent_rsp_fifo:out_ready
	wire          slide_pio_s1_agent_rsp_fifo_out_startofpacket;                                      // slide_pio_s1_agent_rsp_fifo:out_startofpacket -> slide_pio_s1_agent:rf_sink_startofpacket
	wire          slide_pio_s1_agent_rsp_fifo_out_endofpacket;                                        // slide_pio_s1_agent_rsp_fifo:out_endofpacket -> slide_pio_s1_agent:rf_sink_endofpacket
	wire          slide_pio_s1_agent_rdata_fifo_src_valid;                                            // slide_pio_s1_agent:rdata_fifo_src_valid -> slide_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] slide_pio_s1_agent_rdata_fifo_src_data;                                             // slide_pio_s1_agent:rdata_fifo_src_data -> slide_pio_s1_agent_rdata_fifo:in_data
	wire          slide_pio_s1_agent_rdata_fifo_src_ready;                                            // slide_pio_s1_agent_rdata_fifo:in_ready -> slide_pio_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_006_src_valid;                                                              // cmd_mux_006:src_valid -> slide_pio_s1_agent:cp_valid
	wire  [103:0] cmd_mux_006_src_data;                                                               // cmd_mux_006:src_data -> slide_pio_s1_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                              // slide_pio_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [10:0] cmd_mux_006_src_channel;                                                            // cmd_mux_006:src_channel -> slide_pio_s1_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                      // cmd_mux_006:src_startofpacket -> slide_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                        // cmd_mux_006:src_endofpacket -> slide_pio_s1_agent:cp_endofpacket
	wire   [31:0] timer_0_s1_agent_m0_readdata;                                                       // timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	wire          timer_0_s1_agent_m0_waitrequest;                                                    // timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	wire          timer_0_s1_agent_m0_debugaccess;                                                    // timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	wire   [22:0] timer_0_s1_agent_m0_address;                                                        // timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	wire    [3:0] timer_0_s1_agent_m0_byteenable;                                                     // timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	wire          timer_0_s1_agent_m0_read;                                                           // timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	wire          timer_0_s1_agent_m0_readdatavalid;                                                  // timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	wire          timer_0_s1_agent_m0_lock;                                                           // timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	wire   [31:0] timer_0_s1_agent_m0_writedata;                                                      // timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	wire          timer_0_s1_agent_m0_write;                                                          // timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	wire    [2:0] timer_0_s1_agent_m0_burstcount;                                                     // timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	wire          timer_0_s1_agent_rf_source_valid;                                                   // timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	wire  [104:0] timer_0_s1_agent_rf_source_data;                                                    // timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	wire          timer_0_s1_agent_rf_source_ready;                                                   // timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	wire          timer_0_s1_agent_rf_source_startofpacket;                                           // timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_0_s1_agent_rf_source_endofpacket;                                             // timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_valid;                                                // timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	wire  [104:0] timer_0_s1_agent_rsp_fifo_out_data;                                                 // timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	wire          timer_0_s1_agent_rsp_fifo_out_ready;                                                // timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	wire          timer_0_s1_agent_rsp_fifo_out_startofpacket;                                        // timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_endofpacket;                                          // timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	wire          timer_0_s1_agent_rdata_fifo_src_valid;                                              // timer_0_s1_agent:rdata_fifo_src_valid -> timer_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_src_data;                                               // timer_0_s1_agent:rdata_fifo_src_data -> timer_0_s1_agent_rdata_fifo:in_data
	wire          timer_0_s1_agent_rdata_fifo_src_ready;                                              // timer_0_s1_agent_rdata_fifo:in_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_007_src_valid;                                                              // cmd_mux_007:src_valid -> timer_0_s1_agent:cp_valid
	wire  [103:0] cmd_mux_007_src_data;                                                               // cmd_mux_007:src_data -> timer_0_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                              // timer_0_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [10:0] cmd_mux_007_src_channel;                                                            // cmd_mux_007:src_channel -> timer_0_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                      // cmd_mux_007:src_startofpacket -> timer_0_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                        // cmd_mux_007:src_endofpacket -> timer_0_s1_agent:cp_endofpacket
	wire   [31:0] pio_0_s1_agent_m0_readdata;                                                         // pio_0_s1_translator:uav_readdata -> pio_0_s1_agent:m0_readdata
	wire          pio_0_s1_agent_m0_waitrequest;                                                      // pio_0_s1_translator:uav_waitrequest -> pio_0_s1_agent:m0_waitrequest
	wire          pio_0_s1_agent_m0_debugaccess;                                                      // pio_0_s1_agent:m0_debugaccess -> pio_0_s1_translator:uav_debugaccess
	wire   [22:0] pio_0_s1_agent_m0_address;                                                          // pio_0_s1_agent:m0_address -> pio_0_s1_translator:uav_address
	wire    [3:0] pio_0_s1_agent_m0_byteenable;                                                       // pio_0_s1_agent:m0_byteenable -> pio_0_s1_translator:uav_byteenable
	wire          pio_0_s1_agent_m0_read;                                                             // pio_0_s1_agent:m0_read -> pio_0_s1_translator:uav_read
	wire          pio_0_s1_agent_m0_readdatavalid;                                                    // pio_0_s1_translator:uav_readdatavalid -> pio_0_s1_agent:m0_readdatavalid
	wire          pio_0_s1_agent_m0_lock;                                                             // pio_0_s1_agent:m0_lock -> pio_0_s1_translator:uav_lock
	wire   [31:0] pio_0_s1_agent_m0_writedata;                                                        // pio_0_s1_agent:m0_writedata -> pio_0_s1_translator:uav_writedata
	wire          pio_0_s1_agent_m0_write;                                                            // pio_0_s1_agent:m0_write -> pio_0_s1_translator:uav_write
	wire    [2:0] pio_0_s1_agent_m0_burstcount;                                                       // pio_0_s1_agent:m0_burstcount -> pio_0_s1_translator:uav_burstcount
	wire          pio_0_s1_agent_rf_source_valid;                                                     // pio_0_s1_agent:rf_source_valid -> pio_0_s1_agent_rsp_fifo:in_valid
	wire  [104:0] pio_0_s1_agent_rf_source_data;                                                      // pio_0_s1_agent:rf_source_data -> pio_0_s1_agent_rsp_fifo:in_data
	wire          pio_0_s1_agent_rf_source_ready;                                                     // pio_0_s1_agent_rsp_fifo:in_ready -> pio_0_s1_agent:rf_source_ready
	wire          pio_0_s1_agent_rf_source_startofpacket;                                             // pio_0_s1_agent:rf_source_startofpacket -> pio_0_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_0_s1_agent_rf_source_endofpacket;                                               // pio_0_s1_agent:rf_source_endofpacket -> pio_0_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_0_s1_agent_rsp_fifo_out_valid;                                                  // pio_0_s1_agent_rsp_fifo:out_valid -> pio_0_s1_agent:rf_sink_valid
	wire  [104:0] pio_0_s1_agent_rsp_fifo_out_data;                                                   // pio_0_s1_agent_rsp_fifo:out_data -> pio_0_s1_agent:rf_sink_data
	wire          pio_0_s1_agent_rsp_fifo_out_ready;                                                  // pio_0_s1_agent:rf_sink_ready -> pio_0_s1_agent_rsp_fifo:out_ready
	wire          pio_0_s1_agent_rsp_fifo_out_startofpacket;                                          // pio_0_s1_agent_rsp_fifo:out_startofpacket -> pio_0_s1_agent:rf_sink_startofpacket
	wire          pio_0_s1_agent_rsp_fifo_out_endofpacket;                                            // pio_0_s1_agent_rsp_fifo:out_endofpacket -> pio_0_s1_agent:rf_sink_endofpacket
	wire          pio_0_s1_agent_rdata_fifo_src_valid;                                                // pio_0_s1_agent:rdata_fifo_src_valid -> pio_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pio_0_s1_agent_rdata_fifo_src_data;                                                 // pio_0_s1_agent:rdata_fifo_src_data -> pio_0_s1_agent_rdata_fifo:in_data
	wire          pio_0_s1_agent_rdata_fifo_src_ready;                                                // pio_0_s1_agent_rdata_fifo:in_ready -> pio_0_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_008_src_valid;                                                              // cmd_mux_008:src_valid -> pio_0_s1_agent:cp_valid
	wire  [103:0] cmd_mux_008_src_data;                                                               // cmd_mux_008:src_data -> pio_0_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                              // pio_0_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [10:0] cmd_mux_008_src_channel;                                                            // cmd_mux_008:src_channel -> pio_0_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                      // cmd_mux_008:src_startofpacket -> pio_0_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                        // cmd_mux_008:src_endofpacket -> pio_0_s1_agent:cp_endofpacket
	wire   [31:0] modular_adc_0_sample_store_csr_agent_m0_readdata;                                   // modular_adc_0_sample_store_csr_translator:uav_readdata -> modular_adc_0_sample_store_csr_agent:m0_readdata
	wire          modular_adc_0_sample_store_csr_agent_m0_waitrequest;                                // modular_adc_0_sample_store_csr_translator:uav_waitrequest -> modular_adc_0_sample_store_csr_agent:m0_waitrequest
	wire          modular_adc_0_sample_store_csr_agent_m0_debugaccess;                                // modular_adc_0_sample_store_csr_agent:m0_debugaccess -> modular_adc_0_sample_store_csr_translator:uav_debugaccess
	wire   [22:0] modular_adc_0_sample_store_csr_agent_m0_address;                                    // modular_adc_0_sample_store_csr_agent:m0_address -> modular_adc_0_sample_store_csr_translator:uav_address
	wire    [3:0] modular_adc_0_sample_store_csr_agent_m0_byteenable;                                 // modular_adc_0_sample_store_csr_agent:m0_byteenable -> modular_adc_0_sample_store_csr_translator:uav_byteenable
	wire          modular_adc_0_sample_store_csr_agent_m0_read;                                       // modular_adc_0_sample_store_csr_agent:m0_read -> modular_adc_0_sample_store_csr_translator:uav_read
	wire          modular_adc_0_sample_store_csr_agent_m0_readdatavalid;                              // modular_adc_0_sample_store_csr_translator:uav_readdatavalid -> modular_adc_0_sample_store_csr_agent:m0_readdatavalid
	wire          modular_adc_0_sample_store_csr_agent_m0_lock;                                       // modular_adc_0_sample_store_csr_agent:m0_lock -> modular_adc_0_sample_store_csr_translator:uav_lock
	wire   [31:0] modular_adc_0_sample_store_csr_agent_m0_writedata;                                  // modular_adc_0_sample_store_csr_agent:m0_writedata -> modular_adc_0_sample_store_csr_translator:uav_writedata
	wire          modular_adc_0_sample_store_csr_agent_m0_write;                                      // modular_adc_0_sample_store_csr_agent:m0_write -> modular_adc_0_sample_store_csr_translator:uav_write
	wire    [2:0] modular_adc_0_sample_store_csr_agent_m0_burstcount;                                 // modular_adc_0_sample_store_csr_agent:m0_burstcount -> modular_adc_0_sample_store_csr_translator:uav_burstcount
	wire          modular_adc_0_sample_store_csr_agent_rf_source_valid;                               // modular_adc_0_sample_store_csr_agent:rf_source_valid -> modular_adc_0_sample_store_csr_agent_rsp_fifo:in_valid
	wire  [104:0] modular_adc_0_sample_store_csr_agent_rf_source_data;                                // modular_adc_0_sample_store_csr_agent:rf_source_data -> modular_adc_0_sample_store_csr_agent_rsp_fifo:in_data
	wire          modular_adc_0_sample_store_csr_agent_rf_source_ready;                               // modular_adc_0_sample_store_csr_agent_rsp_fifo:in_ready -> modular_adc_0_sample_store_csr_agent:rf_source_ready
	wire          modular_adc_0_sample_store_csr_agent_rf_source_startofpacket;                       // modular_adc_0_sample_store_csr_agent:rf_source_startofpacket -> modular_adc_0_sample_store_csr_agent_rsp_fifo:in_startofpacket
	wire          modular_adc_0_sample_store_csr_agent_rf_source_endofpacket;                         // modular_adc_0_sample_store_csr_agent:rf_source_endofpacket -> modular_adc_0_sample_store_csr_agent_rsp_fifo:in_endofpacket
	wire          modular_adc_0_sample_store_csr_agent_rsp_fifo_out_valid;                            // modular_adc_0_sample_store_csr_agent_rsp_fifo:out_valid -> modular_adc_0_sample_store_csr_agent:rf_sink_valid
	wire  [104:0] modular_adc_0_sample_store_csr_agent_rsp_fifo_out_data;                             // modular_adc_0_sample_store_csr_agent_rsp_fifo:out_data -> modular_adc_0_sample_store_csr_agent:rf_sink_data
	wire          modular_adc_0_sample_store_csr_agent_rsp_fifo_out_ready;                            // modular_adc_0_sample_store_csr_agent:rf_sink_ready -> modular_adc_0_sample_store_csr_agent_rsp_fifo:out_ready
	wire          modular_adc_0_sample_store_csr_agent_rsp_fifo_out_startofpacket;                    // modular_adc_0_sample_store_csr_agent_rsp_fifo:out_startofpacket -> modular_adc_0_sample_store_csr_agent:rf_sink_startofpacket
	wire          modular_adc_0_sample_store_csr_agent_rsp_fifo_out_endofpacket;                      // modular_adc_0_sample_store_csr_agent_rsp_fifo:out_endofpacket -> modular_adc_0_sample_store_csr_agent:rf_sink_endofpacket
	wire          modular_adc_0_sample_store_csr_agent_rdata_fifo_src_valid;                          // modular_adc_0_sample_store_csr_agent:rdata_fifo_src_valid -> modular_adc_0_sample_store_csr_agent_rdata_fifo:in_valid
	wire   [33:0] modular_adc_0_sample_store_csr_agent_rdata_fifo_src_data;                           // modular_adc_0_sample_store_csr_agent:rdata_fifo_src_data -> modular_adc_0_sample_store_csr_agent_rdata_fifo:in_data
	wire          modular_adc_0_sample_store_csr_agent_rdata_fifo_src_ready;                          // modular_adc_0_sample_store_csr_agent_rdata_fifo:in_ready -> modular_adc_0_sample_store_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_009_src_valid;                                                              // cmd_mux_009:src_valid -> modular_adc_0_sample_store_csr_agent:cp_valid
	wire  [103:0] cmd_mux_009_src_data;                                                               // cmd_mux_009:src_data -> modular_adc_0_sample_store_csr_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                              // modular_adc_0_sample_store_csr_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [10:0] cmd_mux_009_src_channel;                                                            // cmd_mux_009:src_channel -> modular_adc_0_sample_store_csr_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                      // cmd_mux_009:src_startofpacket -> modular_adc_0_sample_store_csr_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                        // cmd_mux_009:src_endofpacket -> modular_adc_0_sample_store_csr_agent:cp_endofpacket
	wire   [31:0] modular_adc_0_sequencer_csr_agent_m0_readdata;                                      // modular_adc_0_sequencer_csr_translator:uav_readdata -> modular_adc_0_sequencer_csr_agent:m0_readdata
	wire          modular_adc_0_sequencer_csr_agent_m0_waitrequest;                                   // modular_adc_0_sequencer_csr_translator:uav_waitrequest -> modular_adc_0_sequencer_csr_agent:m0_waitrequest
	wire          modular_adc_0_sequencer_csr_agent_m0_debugaccess;                                   // modular_adc_0_sequencer_csr_agent:m0_debugaccess -> modular_adc_0_sequencer_csr_translator:uav_debugaccess
	wire   [22:0] modular_adc_0_sequencer_csr_agent_m0_address;                                       // modular_adc_0_sequencer_csr_agent:m0_address -> modular_adc_0_sequencer_csr_translator:uav_address
	wire    [3:0] modular_adc_0_sequencer_csr_agent_m0_byteenable;                                    // modular_adc_0_sequencer_csr_agent:m0_byteenable -> modular_adc_0_sequencer_csr_translator:uav_byteenable
	wire          modular_adc_0_sequencer_csr_agent_m0_read;                                          // modular_adc_0_sequencer_csr_agent:m0_read -> modular_adc_0_sequencer_csr_translator:uav_read
	wire          modular_adc_0_sequencer_csr_agent_m0_readdatavalid;                                 // modular_adc_0_sequencer_csr_translator:uav_readdatavalid -> modular_adc_0_sequencer_csr_agent:m0_readdatavalid
	wire          modular_adc_0_sequencer_csr_agent_m0_lock;                                          // modular_adc_0_sequencer_csr_agent:m0_lock -> modular_adc_0_sequencer_csr_translator:uav_lock
	wire   [31:0] modular_adc_0_sequencer_csr_agent_m0_writedata;                                     // modular_adc_0_sequencer_csr_agent:m0_writedata -> modular_adc_0_sequencer_csr_translator:uav_writedata
	wire          modular_adc_0_sequencer_csr_agent_m0_write;                                         // modular_adc_0_sequencer_csr_agent:m0_write -> modular_adc_0_sequencer_csr_translator:uav_write
	wire    [2:0] modular_adc_0_sequencer_csr_agent_m0_burstcount;                                    // modular_adc_0_sequencer_csr_agent:m0_burstcount -> modular_adc_0_sequencer_csr_translator:uav_burstcount
	wire          modular_adc_0_sequencer_csr_agent_rf_source_valid;                                  // modular_adc_0_sequencer_csr_agent:rf_source_valid -> modular_adc_0_sequencer_csr_agent_rsp_fifo:in_valid
	wire  [104:0] modular_adc_0_sequencer_csr_agent_rf_source_data;                                   // modular_adc_0_sequencer_csr_agent:rf_source_data -> modular_adc_0_sequencer_csr_agent_rsp_fifo:in_data
	wire          modular_adc_0_sequencer_csr_agent_rf_source_ready;                                  // modular_adc_0_sequencer_csr_agent_rsp_fifo:in_ready -> modular_adc_0_sequencer_csr_agent:rf_source_ready
	wire          modular_adc_0_sequencer_csr_agent_rf_source_startofpacket;                          // modular_adc_0_sequencer_csr_agent:rf_source_startofpacket -> modular_adc_0_sequencer_csr_agent_rsp_fifo:in_startofpacket
	wire          modular_adc_0_sequencer_csr_agent_rf_source_endofpacket;                            // modular_adc_0_sequencer_csr_agent:rf_source_endofpacket -> modular_adc_0_sequencer_csr_agent_rsp_fifo:in_endofpacket
	wire          modular_adc_0_sequencer_csr_agent_rsp_fifo_out_valid;                               // modular_adc_0_sequencer_csr_agent_rsp_fifo:out_valid -> modular_adc_0_sequencer_csr_agent:rf_sink_valid
	wire  [104:0] modular_adc_0_sequencer_csr_agent_rsp_fifo_out_data;                                // modular_adc_0_sequencer_csr_agent_rsp_fifo:out_data -> modular_adc_0_sequencer_csr_agent:rf_sink_data
	wire          modular_adc_0_sequencer_csr_agent_rsp_fifo_out_ready;                               // modular_adc_0_sequencer_csr_agent:rf_sink_ready -> modular_adc_0_sequencer_csr_agent_rsp_fifo:out_ready
	wire          modular_adc_0_sequencer_csr_agent_rsp_fifo_out_startofpacket;                       // modular_adc_0_sequencer_csr_agent_rsp_fifo:out_startofpacket -> modular_adc_0_sequencer_csr_agent:rf_sink_startofpacket
	wire          modular_adc_0_sequencer_csr_agent_rsp_fifo_out_endofpacket;                         // modular_adc_0_sequencer_csr_agent_rsp_fifo:out_endofpacket -> modular_adc_0_sequencer_csr_agent:rf_sink_endofpacket
	wire          modular_adc_0_sequencer_csr_agent_rdata_fifo_src_valid;                             // modular_adc_0_sequencer_csr_agent:rdata_fifo_src_valid -> modular_adc_0_sequencer_csr_agent_rdata_fifo:in_valid
	wire   [33:0] modular_adc_0_sequencer_csr_agent_rdata_fifo_src_data;                              // modular_adc_0_sequencer_csr_agent:rdata_fifo_src_data -> modular_adc_0_sequencer_csr_agent_rdata_fifo:in_data
	wire          modular_adc_0_sequencer_csr_agent_rdata_fifo_src_ready;                             // modular_adc_0_sequencer_csr_agent_rdata_fifo:in_ready -> modular_adc_0_sequencer_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_010_src_valid;                                                              // cmd_mux_010:src_valid -> modular_adc_0_sequencer_csr_agent:cp_valid
	wire  [103:0] cmd_mux_010_src_data;                                                               // cmd_mux_010:src_data -> modular_adc_0_sequencer_csr_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                              // modular_adc_0_sequencer_csr_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [10:0] cmd_mux_010_src_channel;                                                            // cmd_mux_010:src_channel -> modular_adc_0_sequencer_csr_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                      // cmd_mux_010:src_startofpacket -> modular_adc_0_sequencer_csr_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                        // cmd_mux_010:src_endofpacket -> modular_adc_0_sequencer_csr_agent:cp_endofpacket
	wire          nios2_gen2_0_data_master_agent_cp_valid;                                            // nios2_gen2_0_data_master_agent:cp_valid -> router:sink_valid
	wire  [103:0] nios2_gen2_0_data_master_agent_cp_data;                                             // nios2_gen2_0_data_master_agent:cp_data -> router:sink_data
	wire          nios2_gen2_0_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_gen2_0_data_master_agent:cp_ready
	wire          nios2_gen2_0_data_master_agent_cp_startofpacket;                                    // nios2_gen2_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          nios2_gen2_0_data_master_agent_cp_endofpacket;                                      // nios2_gen2_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          nios2_gen2_0_instruction_master_agent_cp_valid;                                     // nios2_gen2_0_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [103:0] nios2_gen2_0_instruction_master_agent_cp_data;                                      // nios2_gen2_0_instruction_master_agent:cp_data -> router_001:sink_data
	wire          nios2_gen2_0_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> nios2_gen2_0_instruction_master_agent:cp_ready
	wire          nios2_gen2_0_instruction_master_agent_cp_startofpacket;                             // nios2_gen2_0_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          nios2_gen2_0_instruction_master_agent_cp_endofpacket;                               // nios2_gen2_0_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                                       // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire  [103:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                                        // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                                       // router_002:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                               // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                                 // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                               // router_002:src_valid -> rsp_demux:sink_valid
	wire  [103:0] router_002_src_data;                                                                // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                               // rsp_demux:sink_ready -> router_002:src_ready
	wire   [10:0] router_002_src_channel;                                                             // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                       // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                         // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_valid;                                          // sysid_qsys_0_control_slave_agent:rp_valid -> router_003:sink_valid
	wire  [103:0] sysid_qsys_0_control_slave_agent_rp_data;                                           // sysid_qsys_0_control_slave_agent:rp_data -> router_003:sink_data
	wire          sysid_qsys_0_control_slave_agent_rp_ready;                                          // router_003:sink_ready -> sysid_qsys_0_control_slave_agent:rp_ready
	wire          sysid_qsys_0_control_slave_agent_rp_startofpacket;                                  // sysid_qsys_0_control_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_endofpacket;                                    // sysid_qsys_0_control_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                               // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [103:0] router_003_src_data;                                                                // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                               // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [10:0] router_003_src_channel;                                                             // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                       // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                         // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          onchip_flash_0_csr_agent_rp_valid;                                                  // onchip_flash_0_csr_agent:rp_valid -> router_004:sink_valid
	wire  [103:0] onchip_flash_0_csr_agent_rp_data;                                                   // onchip_flash_0_csr_agent:rp_data -> router_004:sink_data
	wire          onchip_flash_0_csr_agent_rp_ready;                                                  // router_004:sink_ready -> onchip_flash_0_csr_agent:rp_ready
	wire          onchip_flash_0_csr_agent_rp_startofpacket;                                          // onchip_flash_0_csr_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          onchip_flash_0_csr_agent_rp_endofpacket;                                            // onchip_flash_0_csr_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                               // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [103:0] router_004_src_data;                                                                // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                               // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [10:0] router_004_src_channel;                                                             // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                       // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                         // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          onchip_flash_0_data_agent_rp_valid;                                                 // onchip_flash_0_data_agent:rp_valid -> router_005:sink_valid
	wire  [103:0] onchip_flash_0_data_agent_rp_data;                                                  // onchip_flash_0_data_agent:rp_data -> router_005:sink_data
	wire          onchip_flash_0_data_agent_rp_ready;                                                 // router_005:sink_ready -> onchip_flash_0_data_agent:rp_ready
	wire          onchip_flash_0_data_agent_rp_startofpacket;                                         // onchip_flash_0_data_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          onchip_flash_0_data_agent_rp_endofpacket;                                           // onchip_flash_0_data_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                               // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [103:0] router_005_src_data;                                                                // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                               // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [10:0] router_005_src_channel;                                                             // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                                       // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                         // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_valid;                                        // nios2_gen2_0_debug_mem_slave_agent:rp_valid -> router_006:sink_valid
	wire  [103:0] nios2_gen2_0_debug_mem_slave_agent_rp_data;                                         // nios2_gen2_0_debug_mem_slave_agent:rp_data -> router_006:sink_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_ready;                                        // router_006:sink_ready -> nios2_gen2_0_debug_mem_slave_agent:rp_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket;                                // nios2_gen2_0_debug_mem_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket;                                  // nios2_gen2_0_debug_mem_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                               // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [103:0] router_006_src_data;                                                                // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                               // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [10:0] router_006_src_channel;                                                             // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                                       // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                         // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rp_valid;                                                 // onchip_memory2_0_s1_agent:rp_valid -> router_007:sink_valid
	wire  [103:0] onchip_memory2_0_s1_agent_rp_data;                                                  // onchip_memory2_0_s1_agent:rp_data -> router_007:sink_data
	wire          onchip_memory2_0_s1_agent_rp_ready;                                                 // router_007:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire          onchip_memory2_0_s1_agent_rp_startofpacket;                                         // onchip_memory2_0_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rp_endofpacket;                                           // onchip_memory2_0_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                               // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [103:0] router_007_src_data;                                                                // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                               // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [10:0] router_007_src_channel;                                                             // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                                       // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                         // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          slide_pio_s1_agent_rp_valid;                                                        // slide_pio_s1_agent:rp_valid -> router_008:sink_valid
	wire  [103:0] slide_pio_s1_agent_rp_data;                                                         // slide_pio_s1_agent:rp_data -> router_008:sink_data
	wire          slide_pio_s1_agent_rp_ready;                                                        // router_008:sink_ready -> slide_pio_s1_agent:rp_ready
	wire          slide_pio_s1_agent_rp_startofpacket;                                                // slide_pio_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          slide_pio_s1_agent_rp_endofpacket;                                                  // slide_pio_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                               // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [103:0] router_008_src_data;                                                                // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                               // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [10:0] router_008_src_channel;                                                             // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                       // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                         // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          timer_0_s1_agent_rp_valid;                                                          // timer_0_s1_agent:rp_valid -> router_009:sink_valid
	wire  [103:0] timer_0_s1_agent_rp_data;                                                           // timer_0_s1_agent:rp_data -> router_009:sink_data
	wire          timer_0_s1_agent_rp_ready;                                                          // router_009:sink_ready -> timer_0_s1_agent:rp_ready
	wire          timer_0_s1_agent_rp_startofpacket;                                                  // timer_0_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          timer_0_s1_agent_rp_endofpacket;                                                    // timer_0_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                               // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [103:0] router_009_src_data;                                                                // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                               // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [10:0] router_009_src_channel;                                                             // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                       // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                         // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          pio_0_s1_agent_rp_valid;                                                            // pio_0_s1_agent:rp_valid -> router_010:sink_valid
	wire  [103:0] pio_0_s1_agent_rp_data;                                                             // pio_0_s1_agent:rp_data -> router_010:sink_data
	wire          pio_0_s1_agent_rp_ready;                                                            // router_010:sink_ready -> pio_0_s1_agent:rp_ready
	wire          pio_0_s1_agent_rp_startofpacket;                                                    // pio_0_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          pio_0_s1_agent_rp_endofpacket;                                                      // pio_0_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                               // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [103:0] router_010_src_data;                                                                // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                               // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [10:0] router_010_src_channel;                                                             // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                                       // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                                         // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          modular_adc_0_sample_store_csr_agent_rp_valid;                                      // modular_adc_0_sample_store_csr_agent:rp_valid -> router_011:sink_valid
	wire  [103:0] modular_adc_0_sample_store_csr_agent_rp_data;                                       // modular_adc_0_sample_store_csr_agent:rp_data -> router_011:sink_data
	wire          modular_adc_0_sample_store_csr_agent_rp_ready;                                      // router_011:sink_ready -> modular_adc_0_sample_store_csr_agent:rp_ready
	wire          modular_adc_0_sample_store_csr_agent_rp_startofpacket;                              // modular_adc_0_sample_store_csr_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          modular_adc_0_sample_store_csr_agent_rp_endofpacket;                                // modular_adc_0_sample_store_csr_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                               // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [103:0] router_011_src_data;                                                                // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                                               // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [10:0] router_011_src_channel;                                                             // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                                       // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                                         // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          modular_adc_0_sequencer_csr_agent_rp_valid;                                         // modular_adc_0_sequencer_csr_agent:rp_valid -> router_012:sink_valid
	wire  [103:0] modular_adc_0_sequencer_csr_agent_rp_data;                                          // modular_adc_0_sequencer_csr_agent:rp_data -> router_012:sink_data
	wire          modular_adc_0_sequencer_csr_agent_rp_ready;                                         // router_012:sink_ready -> modular_adc_0_sequencer_csr_agent:rp_ready
	wire          modular_adc_0_sequencer_csr_agent_rp_startofpacket;                                 // modular_adc_0_sequencer_csr_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          modular_adc_0_sequencer_csr_agent_rp_endofpacket;                                   // modular_adc_0_sequencer_csr_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                               // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [103:0] router_012_src_data;                                                                // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                                               // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [10:0] router_012_src_channel;                                                             // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                                                       // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                                                         // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_src_valid;                                                                   // router:src_valid -> nios2_gen2_0_data_master_limiter:cmd_sink_valid
	wire  [103:0] router_src_data;                                                                    // router:src_data -> nios2_gen2_0_data_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                                   // nios2_gen2_0_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire   [10:0] router_src_channel;                                                                 // router:src_channel -> nios2_gen2_0_data_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                           // router:src_startofpacket -> nios2_gen2_0_data_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                             // router:src_endofpacket -> nios2_gen2_0_data_master_limiter:cmd_sink_endofpacket
	wire  [103:0] nios2_gen2_0_data_master_limiter_cmd_src_data;                                      // nios2_gen2_0_data_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          nios2_gen2_0_data_master_limiter_cmd_src_ready;                                     // cmd_demux:sink_ready -> nios2_gen2_0_data_master_limiter:cmd_src_ready
	wire   [10:0] nios2_gen2_0_data_master_limiter_cmd_src_channel;                                   // nios2_gen2_0_data_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          nios2_gen2_0_data_master_limiter_cmd_src_startofpacket;                             // nios2_gen2_0_data_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          nios2_gen2_0_data_master_limiter_cmd_src_endofpacket;                               // nios2_gen2_0_data_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                  // rsp_mux:src_valid -> nios2_gen2_0_data_master_limiter:rsp_sink_valid
	wire  [103:0] rsp_mux_src_data;                                                                   // rsp_mux:src_data -> nios2_gen2_0_data_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                  // nios2_gen2_0_data_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [10:0] rsp_mux_src_channel;                                                                // rsp_mux:src_channel -> nios2_gen2_0_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                          // rsp_mux:src_startofpacket -> nios2_gen2_0_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                            // rsp_mux:src_endofpacket -> nios2_gen2_0_data_master_limiter:rsp_sink_endofpacket
	wire          nios2_gen2_0_data_master_limiter_rsp_src_valid;                                     // nios2_gen2_0_data_master_limiter:rsp_src_valid -> nios2_gen2_0_data_master_agent:rp_valid
	wire  [103:0] nios2_gen2_0_data_master_limiter_rsp_src_data;                                      // nios2_gen2_0_data_master_limiter:rsp_src_data -> nios2_gen2_0_data_master_agent:rp_data
	wire          nios2_gen2_0_data_master_limiter_rsp_src_ready;                                     // nios2_gen2_0_data_master_agent:rp_ready -> nios2_gen2_0_data_master_limiter:rsp_src_ready
	wire   [10:0] nios2_gen2_0_data_master_limiter_rsp_src_channel;                                   // nios2_gen2_0_data_master_limiter:rsp_src_channel -> nios2_gen2_0_data_master_agent:rp_channel
	wire          nios2_gen2_0_data_master_limiter_rsp_src_startofpacket;                             // nios2_gen2_0_data_master_limiter:rsp_src_startofpacket -> nios2_gen2_0_data_master_agent:rp_startofpacket
	wire          nios2_gen2_0_data_master_limiter_rsp_src_endofpacket;                               // nios2_gen2_0_data_master_limiter:rsp_src_endofpacket -> nios2_gen2_0_data_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                               // router_001:src_valid -> nios2_gen2_0_instruction_master_limiter:cmd_sink_valid
	wire  [103:0] router_001_src_data;                                                                // router_001:src_data -> nios2_gen2_0_instruction_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                               // nios2_gen2_0_instruction_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [10:0] router_001_src_channel;                                                             // router_001:src_channel -> nios2_gen2_0_instruction_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                       // router_001:src_startofpacket -> nios2_gen2_0_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                         // router_001:src_endofpacket -> nios2_gen2_0_instruction_master_limiter:cmd_sink_endofpacket
	wire  [103:0] nios2_gen2_0_instruction_master_limiter_cmd_src_data;                               // nios2_gen2_0_instruction_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          nios2_gen2_0_instruction_master_limiter_cmd_src_ready;                              // cmd_demux_001:sink_ready -> nios2_gen2_0_instruction_master_limiter:cmd_src_ready
	wire   [10:0] nios2_gen2_0_instruction_master_limiter_cmd_src_channel;                            // nios2_gen2_0_instruction_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          nios2_gen2_0_instruction_master_limiter_cmd_src_startofpacket;                      // nios2_gen2_0_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          nios2_gen2_0_instruction_master_limiter_cmd_src_endofpacket;                        // nios2_gen2_0_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                              // rsp_mux_001:src_valid -> nios2_gen2_0_instruction_master_limiter:rsp_sink_valid
	wire  [103:0] rsp_mux_001_src_data;                                                               // rsp_mux_001:src_data -> nios2_gen2_0_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                              // nios2_gen2_0_instruction_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [10:0] rsp_mux_001_src_channel;                                                            // rsp_mux_001:src_channel -> nios2_gen2_0_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                      // rsp_mux_001:src_startofpacket -> nios2_gen2_0_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                        // rsp_mux_001:src_endofpacket -> nios2_gen2_0_instruction_master_limiter:rsp_sink_endofpacket
	wire          nios2_gen2_0_instruction_master_limiter_rsp_src_valid;                              // nios2_gen2_0_instruction_master_limiter:rsp_src_valid -> nios2_gen2_0_instruction_master_agent:rp_valid
	wire  [103:0] nios2_gen2_0_instruction_master_limiter_rsp_src_data;                               // nios2_gen2_0_instruction_master_limiter:rsp_src_data -> nios2_gen2_0_instruction_master_agent:rp_data
	wire          nios2_gen2_0_instruction_master_limiter_rsp_src_ready;                              // nios2_gen2_0_instruction_master_agent:rp_ready -> nios2_gen2_0_instruction_master_limiter:rsp_src_ready
	wire   [10:0] nios2_gen2_0_instruction_master_limiter_rsp_src_channel;                            // nios2_gen2_0_instruction_master_limiter:rsp_src_channel -> nios2_gen2_0_instruction_master_agent:rp_channel
	wire          nios2_gen2_0_instruction_master_limiter_rsp_src_startofpacket;                      // nios2_gen2_0_instruction_master_limiter:rsp_src_startofpacket -> nios2_gen2_0_instruction_master_agent:rp_startofpacket
	wire          nios2_gen2_0_instruction_master_limiter_rsp_src_endofpacket;                        // nios2_gen2_0_instruction_master_limiter:rsp_src_endofpacket -> nios2_gen2_0_instruction_master_agent:rp_endofpacket
	wire          cmd_demux_src2_valid;                                                               // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [103:0] cmd_demux_src2_data;                                                                // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                               // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [10:0] cmd_demux_src2_channel;                                                             // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                       // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                         // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                               // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [103:0] cmd_demux_src3_data;                                                                // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                               // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [10:0] cmd_demux_src3_channel;                                                             // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                       // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                         // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                               // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [103:0] cmd_demux_src4_data;                                                                // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                               // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [10:0] cmd_demux_src4_channel;                                                             // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                       // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                         // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                               // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [103:0] cmd_demux_src5_data;                                                                // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                               // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [10:0] cmd_demux_src5_channel;                                                             // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                       // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                         // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                           // cmd_demux_001:src0_valid -> cmd_mux_003:sink1_valid
	wire  [103:0] cmd_demux_001_src0_data;                                                            // cmd_demux_001:src0_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src0_ready;                                                           // cmd_mux_003:sink1_ready -> cmd_demux_001:src0_ready
	wire   [10:0] cmd_demux_001_src0_channel;                                                         // cmd_demux_001:src0_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                   // cmd_demux_001:src0_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                     // cmd_demux_001:src0_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                           // cmd_demux_001:src1_valid -> cmd_mux_004:sink1_valid
	wire  [103:0] cmd_demux_001_src1_data;                                                            // cmd_demux_001:src1_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src1_ready;                                                           // cmd_mux_004:sink1_ready -> cmd_demux_001:src1_ready
	wire   [10:0] cmd_demux_001_src1_channel;                                                         // cmd_demux_001:src1_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                   // cmd_demux_001:src1_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                     // cmd_demux_001:src1_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                           // cmd_demux_001:src2_valid -> cmd_mux_005:sink1_valid
	wire  [103:0] cmd_demux_001_src2_data;                                                            // cmd_demux_001:src2_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src2_ready;                                                           // cmd_mux_005:sink1_ready -> cmd_demux_001:src2_ready
	wire   [10:0] cmd_demux_001_src2_channel;                                                         // cmd_demux_001:src2_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                   // cmd_demux_001:src2_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                     // cmd_demux_001:src2_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                           // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [103:0] rsp_demux_002_src0_data;                                                            // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                           // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [10:0] rsp_demux_002_src0_channel;                                                         // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                   // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                     // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                           // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [103:0] rsp_demux_003_src0_data;                                                            // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                           // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [10:0] rsp_demux_003_src0_channel;                                                         // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                   // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                     // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                           // rsp_demux_003:src1_valid -> rsp_mux_001:sink0_valid
	wire  [103:0] rsp_demux_003_src1_data;                                                            // rsp_demux_003:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_003_src1_ready;                                                           // rsp_mux_001:sink0_ready -> rsp_demux_003:src1_ready
	wire   [10:0] rsp_demux_003_src1_channel;                                                         // rsp_demux_003:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_003_src1_startofpacket;                                                   // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                     // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_004_src0_valid;                                                           // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [103:0] rsp_demux_004_src0_data;                                                            // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                           // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [10:0] rsp_demux_004_src0_channel;                                                         // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                   // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                     // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                           // rsp_demux_004:src1_valid -> rsp_mux_001:sink1_valid
	wire  [103:0] rsp_demux_004_src1_data;                                                            // rsp_demux_004:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_004_src1_ready;                                                           // rsp_mux_001:sink1_ready -> rsp_demux_004:src1_ready
	wire   [10:0] rsp_demux_004_src1_channel;                                                         // rsp_demux_004:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_004_src1_startofpacket;                                                   // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                     // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_005_src0_valid;                                                           // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [103:0] rsp_demux_005_src0_data;                                                            // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                           // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [10:0] rsp_demux_005_src0_channel;                                                         // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                   // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                     // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                           // rsp_demux_005:src1_valid -> rsp_mux_001:sink2_valid
	wire  [103:0] rsp_demux_005_src1_data;                                                            // rsp_demux_005:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_005_src1_ready;                                                           // rsp_mux_001:sink2_ready -> rsp_demux_005:src1_ready
	wire   [10:0] rsp_demux_005_src1_channel;                                                         // rsp_demux_005:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_005_src1_startofpacket;                                                   // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                     // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          cmd_demux_src0_valid;                                                               // cmd_demux:src0_valid -> crosser:in_valid
	wire  [103:0] cmd_demux_src0_data;                                                                // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                               // crosser:in_ready -> cmd_demux:src0_ready
	wire   [10:0] cmd_demux_src0_channel;                                                             // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                                       // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                         // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                  // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [103:0] crosser_out_data;                                                                   // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                                  // cmd_mux:sink0_ready -> crosser:out_ready
	wire   [10:0] crosser_out_channel;                                                                // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                                          // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                            // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                               // cmd_demux:src1_valid -> crosser_001:in_valid
	wire  [103:0] cmd_demux_src1_data;                                                                // cmd_demux:src1_data -> crosser_001:in_data
	wire          cmd_demux_src1_ready;                                                               // crosser_001:in_ready -> cmd_demux:src1_ready
	wire   [10:0] cmd_demux_src1_channel;                                                             // cmd_demux:src1_channel -> crosser_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                                       // cmd_demux:src1_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                         // cmd_demux:src1_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                              // crosser_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [103:0] crosser_001_out_data;                                                               // crosser_001:out_data -> cmd_mux_001:sink0_data
	wire          crosser_001_out_ready;                                                              // cmd_mux_001:sink0_ready -> crosser_001:out_ready
	wire   [10:0] crosser_001_out_channel;                                                            // crosser_001:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_001_out_startofpacket;                                                      // crosser_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                        // crosser_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                               // cmd_demux:src6_valid -> crosser_002:in_valid
	wire  [103:0] cmd_demux_src6_data;                                                                // cmd_demux:src6_data -> crosser_002:in_data
	wire          cmd_demux_src6_ready;                                                               // crosser_002:in_ready -> cmd_demux:src6_ready
	wire   [10:0] cmd_demux_src6_channel;                                                             // cmd_demux:src6_channel -> crosser_002:in_channel
	wire          cmd_demux_src6_startofpacket;                                                       // cmd_demux:src6_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                         // cmd_demux:src6_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                              // crosser_002:out_valid -> cmd_mux_006:sink0_valid
	wire  [103:0] crosser_002_out_data;                                                               // crosser_002:out_data -> cmd_mux_006:sink0_data
	wire          crosser_002_out_ready;                                                              // cmd_mux_006:sink0_ready -> crosser_002:out_ready
	wire   [10:0] crosser_002_out_channel;                                                            // crosser_002:out_channel -> cmd_mux_006:sink0_channel
	wire          crosser_002_out_startofpacket;                                                      // crosser_002:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                                        // crosser_002:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                               // cmd_demux:src7_valid -> crosser_003:in_valid
	wire  [103:0] cmd_demux_src7_data;                                                                // cmd_demux:src7_data -> crosser_003:in_data
	wire          cmd_demux_src7_ready;                                                               // crosser_003:in_ready -> cmd_demux:src7_ready
	wire   [10:0] cmd_demux_src7_channel;                                                             // cmd_demux:src7_channel -> crosser_003:in_channel
	wire          cmd_demux_src7_startofpacket;                                                       // cmd_demux:src7_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                         // cmd_demux:src7_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                              // crosser_003:out_valid -> cmd_mux_007:sink0_valid
	wire  [103:0] crosser_003_out_data;                                                               // crosser_003:out_data -> cmd_mux_007:sink0_data
	wire          crosser_003_out_ready;                                                              // cmd_mux_007:sink0_ready -> crosser_003:out_ready
	wire   [10:0] crosser_003_out_channel;                                                            // crosser_003:out_channel -> cmd_mux_007:sink0_channel
	wire          crosser_003_out_startofpacket;                                                      // crosser_003:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                                        // crosser_003:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                               // cmd_demux:src8_valid -> crosser_004:in_valid
	wire  [103:0] cmd_demux_src8_data;                                                                // cmd_demux:src8_data -> crosser_004:in_data
	wire          cmd_demux_src8_ready;                                                               // crosser_004:in_ready -> cmd_demux:src8_ready
	wire   [10:0] cmd_demux_src8_channel;                                                             // cmd_demux:src8_channel -> crosser_004:in_channel
	wire          cmd_demux_src8_startofpacket;                                                       // cmd_demux:src8_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                         // cmd_demux:src8_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                              // crosser_004:out_valid -> cmd_mux_008:sink0_valid
	wire  [103:0] crosser_004_out_data;                                                               // crosser_004:out_data -> cmd_mux_008:sink0_data
	wire          crosser_004_out_ready;                                                              // cmd_mux_008:sink0_ready -> crosser_004:out_ready
	wire   [10:0] crosser_004_out_channel;                                                            // crosser_004:out_channel -> cmd_mux_008:sink0_channel
	wire          crosser_004_out_startofpacket;                                                      // crosser_004:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                                                        // crosser_004:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                               // cmd_demux:src9_valid -> crosser_005:in_valid
	wire  [103:0] cmd_demux_src9_data;                                                                // cmd_demux:src9_data -> crosser_005:in_data
	wire          cmd_demux_src9_ready;                                                               // crosser_005:in_ready -> cmd_demux:src9_ready
	wire   [10:0] cmd_demux_src9_channel;                                                             // cmd_demux:src9_channel -> crosser_005:in_channel
	wire          cmd_demux_src9_startofpacket;                                                       // cmd_demux:src9_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                         // cmd_demux:src9_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                              // crosser_005:out_valid -> cmd_mux_009:sink0_valid
	wire  [103:0] crosser_005_out_data;                                                               // crosser_005:out_data -> cmd_mux_009:sink0_data
	wire          crosser_005_out_ready;                                                              // cmd_mux_009:sink0_ready -> crosser_005:out_ready
	wire   [10:0] crosser_005_out_channel;                                                            // crosser_005:out_channel -> cmd_mux_009:sink0_channel
	wire          crosser_005_out_startofpacket;                                                      // crosser_005:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          crosser_005_out_endofpacket;                                                        // crosser_005:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                              // cmd_demux:src10_valid -> crosser_006:in_valid
	wire  [103:0] cmd_demux_src10_data;                                                               // cmd_demux:src10_data -> crosser_006:in_data
	wire          cmd_demux_src10_ready;                                                              // crosser_006:in_ready -> cmd_demux:src10_ready
	wire   [10:0] cmd_demux_src10_channel;                                                            // cmd_demux:src10_channel -> crosser_006:in_channel
	wire          cmd_demux_src10_startofpacket;                                                      // cmd_demux:src10_startofpacket -> crosser_006:in_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                        // cmd_demux:src10_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                              // crosser_006:out_valid -> cmd_mux_010:sink0_valid
	wire  [103:0] crosser_006_out_data;                                                               // crosser_006:out_data -> cmd_mux_010:sink0_data
	wire          crosser_006_out_ready;                                                              // cmd_mux_010:sink0_ready -> crosser_006:out_ready
	wire   [10:0] crosser_006_out_channel;                                                            // crosser_006:out_channel -> cmd_mux_010:sink0_channel
	wire          crosser_006_out_startofpacket;                                                      // crosser_006:out_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          crosser_006_out_endofpacket;                                                        // crosser_006:out_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                               // rsp_demux:src0_valid -> crosser_007:in_valid
	wire  [103:0] rsp_demux_src0_data;                                                                // rsp_demux:src0_data -> crosser_007:in_data
	wire          rsp_demux_src0_ready;                                                               // crosser_007:in_ready -> rsp_demux:src0_ready
	wire   [10:0] rsp_demux_src0_channel;                                                             // rsp_demux:src0_channel -> crosser_007:in_channel
	wire          rsp_demux_src0_startofpacket;                                                       // rsp_demux:src0_startofpacket -> crosser_007:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                         // rsp_demux:src0_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                              // crosser_007:out_valid -> rsp_mux:sink0_valid
	wire  [103:0] crosser_007_out_data;                                                               // crosser_007:out_data -> rsp_mux:sink0_data
	wire          crosser_007_out_ready;                                                              // rsp_mux:sink0_ready -> crosser_007:out_ready
	wire   [10:0] crosser_007_out_channel;                                                            // crosser_007:out_channel -> rsp_mux:sink0_channel
	wire          crosser_007_out_startofpacket;                                                      // crosser_007:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_007_out_endofpacket;                                                        // crosser_007:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                           // rsp_demux_001:src0_valid -> crosser_008:in_valid
	wire  [103:0] rsp_demux_001_src0_data;                                                            // rsp_demux_001:src0_data -> crosser_008:in_data
	wire          rsp_demux_001_src0_ready;                                                           // crosser_008:in_ready -> rsp_demux_001:src0_ready
	wire   [10:0] rsp_demux_001_src0_channel;                                                         // rsp_demux_001:src0_channel -> crosser_008:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                   // rsp_demux_001:src0_startofpacket -> crosser_008:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                     // rsp_demux_001:src0_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                                              // crosser_008:out_valid -> rsp_mux:sink1_valid
	wire  [103:0] crosser_008_out_data;                                                               // crosser_008:out_data -> rsp_mux:sink1_data
	wire          crosser_008_out_ready;                                                              // rsp_mux:sink1_ready -> crosser_008:out_ready
	wire   [10:0] crosser_008_out_channel;                                                            // crosser_008:out_channel -> rsp_mux:sink1_channel
	wire          crosser_008_out_startofpacket;                                                      // crosser_008:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_008_out_endofpacket;                                                        // crosser_008:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_006_src0_valid;                                                           // rsp_demux_006:src0_valid -> crosser_009:in_valid
	wire  [103:0] rsp_demux_006_src0_data;                                                            // rsp_demux_006:src0_data -> crosser_009:in_data
	wire          rsp_demux_006_src0_ready;                                                           // crosser_009:in_ready -> rsp_demux_006:src0_ready
	wire   [10:0] rsp_demux_006_src0_channel;                                                         // rsp_demux_006:src0_channel -> crosser_009:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                                   // rsp_demux_006:src0_startofpacket -> crosser_009:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                     // rsp_demux_006:src0_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                                              // crosser_009:out_valid -> rsp_mux:sink6_valid
	wire  [103:0] crosser_009_out_data;                                                               // crosser_009:out_data -> rsp_mux:sink6_data
	wire          crosser_009_out_ready;                                                              // rsp_mux:sink6_ready -> crosser_009:out_ready
	wire   [10:0] crosser_009_out_channel;                                                            // crosser_009:out_channel -> rsp_mux:sink6_channel
	wire          crosser_009_out_startofpacket;                                                      // crosser_009:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire          crosser_009_out_endofpacket;                                                        // crosser_009:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                           // rsp_demux_007:src0_valid -> crosser_010:in_valid
	wire  [103:0] rsp_demux_007_src0_data;                                                            // rsp_demux_007:src0_data -> crosser_010:in_data
	wire          rsp_demux_007_src0_ready;                                                           // crosser_010:in_ready -> rsp_demux_007:src0_ready
	wire   [10:0] rsp_demux_007_src0_channel;                                                         // rsp_demux_007:src0_channel -> crosser_010:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                                   // rsp_demux_007:src0_startofpacket -> crosser_010:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                     // rsp_demux_007:src0_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                                              // crosser_010:out_valid -> rsp_mux:sink7_valid
	wire  [103:0] crosser_010_out_data;                                                               // crosser_010:out_data -> rsp_mux:sink7_data
	wire          crosser_010_out_ready;                                                              // rsp_mux:sink7_ready -> crosser_010:out_ready
	wire   [10:0] crosser_010_out_channel;                                                            // crosser_010:out_channel -> rsp_mux:sink7_channel
	wire          crosser_010_out_startofpacket;                                                      // crosser_010:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire          crosser_010_out_endofpacket;                                                        // crosser_010:out_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                           // rsp_demux_008:src0_valid -> crosser_011:in_valid
	wire  [103:0] rsp_demux_008_src0_data;                                                            // rsp_demux_008:src0_data -> crosser_011:in_data
	wire          rsp_demux_008_src0_ready;                                                           // crosser_011:in_ready -> rsp_demux_008:src0_ready
	wire   [10:0] rsp_demux_008_src0_channel;                                                         // rsp_demux_008:src0_channel -> crosser_011:in_channel
	wire          rsp_demux_008_src0_startofpacket;                                                   // rsp_demux_008:src0_startofpacket -> crosser_011:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                     // rsp_demux_008:src0_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                                              // crosser_011:out_valid -> rsp_mux:sink8_valid
	wire  [103:0] crosser_011_out_data;                                                               // crosser_011:out_data -> rsp_mux:sink8_data
	wire          crosser_011_out_ready;                                                              // rsp_mux:sink8_ready -> crosser_011:out_ready
	wire   [10:0] crosser_011_out_channel;                                                            // crosser_011:out_channel -> rsp_mux:sink8_channel
	wire          crosser_011_out_startofpacket;                                                      // crosser_011:out_startofpacket -> rsp_mux:sink8_startofpacket
	wire          crosser_011_out_endofpacket;                                                        // crosser_011:out_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                           // rsp_demux_009:src0_valid -> crosser_012:in_valid
	wire  [103:0] rsp_demux_009_src0_data;                                                            // rsp_demux_009:src0_data -> crosser_012:in_data
	wire          rsp_demux_009_src0_ready;                                                           // crosser_012:in_ready -> rsp_demux_009:src0_ready
	wire   [10:0] rsp_demux_009_src0_channel;                                                         // rsp_demux_009:src0_channel -> crosser_012:in_channel
	wire          rsp_demux_009_src0_startofpacket;                                                   // rsp_demux_009:src0_startofpacket -> crosser_012:in_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                     // rsp_demux_009:src0_endofpacket -> crosser_012:in_endofpacket
	wire          crosser_012_out_valid;                                                              // crosser_012:out_valid -> rsp_mux:sink9_valid
	wire  [103:0] crosser_012_out_data;                                                               // crosser_012:out_data -> rsp_mux:sink9_data
	wire          crosser_012_out_ready;                                                              // rsp_mux:sink9_ready -> crosser_012:out_ready
	wire   [10:0] crosser_012_out_channel;                                                            // crosser_012:out_channel -> rsp_mux:sink9_channel
	wire          crosser_012_out_startofpacket;                                                      // crosser_012:out_startofpacket -> rsp_mux:sink9_startofpacket
	wire          crosser_012_out_endofpacket;                                                        // crosser_012:out_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                           // rsp_demux_010:src0_valid -> crosser_013:in_valid
	wire  [103:0] rsp_demux_010_src0_data;                                                            // rsp_demux_010:src0_data -> crosser_013:in_data
	wire          rsp_demux_010_src0_ready;                                                           // crosser_013:in_ready -> rsp_demux_010:src0_ready
	wire   [10:0] rsp_demux_010_src0_channel;                                                         // rsp_demux_010:src0_channel -> crosser_013:in_channel
	wire          rsp_demux_010_src0_startofpacket;                                                   // rsp_demux_010:src0_startofpacket -> crosser_013:in_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                     // rsp_demux_010:src0_endofpacket -> crosser_013:in_endofpacket
	wire          crosser_013_out_valid;                                                              // crosser_013:out_valid -> rsp_mux:sink10_valid
	wire  [103:0] crosser_013_out_data;                                                               // crosser_013:out_data -> rsp_mux:sink10_data
	wire          crosser_013_out_ready;                                                              // rsp_mux:sink10_ready -> crosser_013:out_ready
	wire   [10:0] crosser_013_out_channel;                                                            // crosser_013:out_channel -> rsp_mux:sink10_channel
	wire          crosser_013_out_startofpacket;                                                      // crosser_013:out_startofpacket -> rsp_mux:sink10_startofpacket
	wire          crosser_013_out_endofpacket;                                                        // crosser_013:out_endofpacket -> rsp_mux:sink10_endofpacket
	wire   [10:0] nios2_gen2_0_data_master_limiter_cmd_valid_data;                                    // nios2_gen2_0_data_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [10:0] nios2_gen2_0_instruction_master_limiter_cmd_valid_data;                             // nios2_gen2_0_instruction_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid;                           // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data;                            // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready;                           // avalon_st_adapter:in_0_ready -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                      // avalon_st_adapter:out_0_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                       // avalon_st_adapter:out_0_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                      // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                      // avalon_st_adapter:out_0_error -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_out_valid;                              // sysid_qsys_0_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_out_data;                               // sysid_qsys_0_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_out_ready;                              // avalon_st_adapter_001:in_0_ready -> sysid_qsys_0_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                  // avalon_st_adapter_001:out_0_valid -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                   // avalon_st_adapter_001:out_0_data -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                  // sysid_qsys_0_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                  // avalon_st_adapter_001:out_0_error -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_error
	wire          onchip_flash_0_csr_agent_rdata_fifo_src_valid;                                      // onchip_flash_0_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] onchip_flash_0_csr_agent_rdata_fifo_src_data;                                       // onchip_flash_0_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          onchip_flash_0_csr_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_002:in_0_ready -> onchip_flash_0_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                  // avalon_st_adapter_002:out_0_valid -> onchip_flash_0_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                   // avalon_st_adapter_002:out_0_data -> onchip_flash_0_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                  // onchip_flash_0_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                  // avalon_st_adapter_002:out_0_error -> onchip_flash_0_csr_agent:rdata_fifo_sink_error
	wire          onchip_flash_0_data_agent_rdata_fifo_src_valid;                                     // onchip_flash_0_data_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] onchip_flash_0_data_agent_rdata_fifo_src_data;                                      // onchip_flash_0_data_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          onchip_flash_0_data_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_003:in_0_ready -> onchip_flash_0_data_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                  // avalon_st_adapter_003:out_0_valid -> onchip_flash_0_data_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                   // avalon_st_adapter_003:out_0_data -> onchip_flash_0_data_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                  // onchip_flash_0_data_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                  // avalon_st_adapter_003:out_0_error -> onchip_flash_0_data_agent:rdata_fifo_sink_error
	wire          nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid;                            // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data;                             // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_004:in_0_ready -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                  // avalon_st_adapter_004:out_0_valid -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                   // avalon_st_adapter_004:out_0_data -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                  // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                  // avalon_st_adapter_004:out_0_error -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                                     // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                                      // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_005:in_0_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                  // avalon_st_adapter_005:out_0_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                   // avalon_st_adapter_005:out_0_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                  // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                  // avalon_st_adapter_005:out_0_error -> onchip_memory2_0_s1_agent:rdata_fifo_sink_error
	wire          slide_pio_s1_agent_rdata_fifo_out_valid;                                            // slide_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] slide_pio_s1_agent_rdata_fifo_out_data;                                             // slide_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          slide_pio_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_006:in_0_ready -> slide_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                  // avalon_st_adapter_006:out_0_valid -> slide_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                   // avalon_st_adapter_006:out_0_data -> slide_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                  // slide_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                  // avalon_st_adapter_006:out_0_error -> slide_pio_s1_agent:rdata_fifo_sink_error
	wire          timer_0_s1_agent_rdata_fifo_out_valid;                                              // timer_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_out_data;                                               // timer_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          timer_0_s1_agent_rdata_fifo_out_ready;                                              // avalon_st_adapter_007:in_0_ready -> timer_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                  // avalon_st_adapter_007:out_0_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                   // avalon_st_adapter_007:out_0_data -> timer_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                  // timer_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                  // avalon_st_adapter_007:out_0_error -> timer_0_s1_agent:rdata_fifo_sink_error
	wire          pio_0_s1_agent_rdata_fifo_out_valid;                                                // pio_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] pio_0_s1_agent_rdata_fifo_out_data;                                                 // pio_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          pio_0_s1_agent_rdata_fifo_out_ready;                                                // avalon_st_adapter_008:in_0_ready -> pio_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                  // avalon_st_adapter_008:out_0_valid -> pio_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                   // avalon_st_adapter_008:out_0_data -> pio_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                  // pio_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                  // avalon_st_adapter_008:out_0_error -> pio_0_s1_agent:rdata_fifo_sink_error
	wire          modular_adc_0_sample_store_csr_agent_rdata_fifo_out_valid;                          // modular_adc_0_sample_store_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] modular_adc_0_sample_store_csr_agent_rdata_fifo_out_data;                           // modular_adc_0_sample_store_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          modular_adc_0_sample_store_csr_agent_rdata_fifo_out_ready;                          // avalon_st_adapter_009:in_0_ready -> modular_adc_0_sample_store_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                  // avalon_st_adapter_009:out_0_valid -> modular_adc_0_sample_store_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                   // avalon_st_adapter_009:out_0_data -> modular_adc_0_sample_store_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                  // modular_adc_0_sample_store_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                  // avalon_st_adapter_009:out_0_error -> modular_adc_0_sample_store_csr_agent:rdata_fifo_sink_error
	wire          modular_adc_0_sequencer_csr_agent_rdata_fifo_out_valid;                             // modular_adc_0_sequencer_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] modular_adc_0_sequencer_csr_agent_rdata_fifo_out_data;                              // modular_adc_0_sequencer_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          modular_adc_0_sequencer_csr_agent_rdata_fifo_out_ready;                             // avalon_st_adapter_010:in_0_ready -> modular_adc_0_sequencer_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                  // avalon_st_adapter_010:out_0_valid -> modular_adc_0_sequencer_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                   // avalon_st_adapter_010:out_0_data -> modular_adc_0_sequencer_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                  // modular_adc_0_sequencer_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                  // avalon_st_adapter_010:out_0_error -> modular_adc_0_sequencer_csr_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (23),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (23),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_0_data_master_translator (
		.clk                    (altpll_0_c0_clk),                                                             //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_gen2_0_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_gen2_0_data_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (nios2_gen2_0_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (nios2_gen2_0_data_master_write),                                              //                          .write
		.av_writedata           (nios2_gen2_0_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_gen2_0_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (22),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (23),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_0_instruction_master_translator (
		.clk                    (altpll_0_c0_clk),                                                                    //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_gen2_0_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (nios2_gen2_0_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                               //               (terminated)
		.av_byteenable          (4'b1111),                                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                                               //               (terminated)
		.av_write               (1'b0),                                                                               //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                               //               (terminated)
		.av_lock                (1'b0),                                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                                               //               (terminated)
		.uav_clken              (),                                                                                   //               (terminated)
		.av_clken               (1'b1),                                                                               //               (terminated)
		.uav_response           (2'b00),                                                                              //               (terminated)
		.av_response            (),                                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (23),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                    (altpll_0_c2_clk),                                      //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (23),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_0_control_slave_translator (
		.clk                    (altpll_0_c2_clk),                                   //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (sysid_qsys_0_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_0_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_qsys_0_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_qsys_0_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_qsys_0_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_0_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_0_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_qsys_0_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_qsys_0_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_qsys_0_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_qsys_0_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_qsys_0_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_0_control_slave_readdata),               //                         .readdata
		.av_write               (),                                                  //              (terminated)
		.av_read                (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (23),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_flash_0_csr_translator (
		.clk                    (altpll_0_c0_clk),                                //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_flash_0_csr_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_flash_0_csr_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (onchip_flash_0_csr_agent_m0_read),               //                         .read
		.uav_write              (onchip_flash_0_csr_agent_m0_write),              //                         .write
		.uav_waitrequest        (onchip_flash_0_csr_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (onchip_flash_0_csr_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (onchip_flash_0_csr_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (onchip_flash_0_csr_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (onchip_flash_0_csr_agent_m0_writedata),          //                         .writedata
		.uav_lock               (onchip_flash_0_csr_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (onchip_flash_0_csr_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (onchip_flash_0_csr_address),                     //      avalon_anti_slave_0.address
		.av_write               (onchip_flash_0_csr_write),                       //                         .write
		.av_read                (onchip_flash_0_csr_read),                        //                         .read
		.av_readdata            (onchip_flash_0_csr_readdata),                    //                         .readdata
		.av_writedata           (onchip_flash_0_csr_writedata),                   //                         .writedata
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (19),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (23),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_flash_0_data_translator (
		.clk                    (altpll_0_c0_clk),                                //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_flash_0_data_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_flash_0_data_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (onchip_flash_0_data_agent_m0_read),              //                         .read
		.uav_write              (onchip_flash_0_data_agent_m0_write),             //                         .write
		.uav_waitrequest        (onchip_flash_0_data_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (onchip_flash_0_data_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (onchip_flash_0_data_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (onchip_flash_0_data_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (onchip_flash_0_data_agent_m0_writedata),         //                         .writedata
		.uav_lock               (onchip_flash_0_data_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (onchip_flash_0_data_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (onchip_flash_0_data_address),                    //      avalon_anti_slave_0.address
		.av_write               (onchip_flash_0_data_write),                      //                         .write
		.av_read                (onchip_flash_0_data_read),                       //                         .read
		.av_readdata            (onchip_flash_0_data_readdata),                   //                         .readdata
		.av_writedata           (onchip_flash_0_data_writedata),                  //                         .writedata
		.av_burstcount          (onchip_flash_0_data_burstcount),                 //                         .burstcount
		.av_readdatavalid       (onchip_flash_0_data_readdatavalid),              //                         .readdatavalid
		.av_waitrequest         (onchip_flash_0_data_waitrequest),                //                         .waitrequest
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (23),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_gen2_0_debug_mem_slave_translator (
		.clk                    (altpll_0_c0_clk),                                     //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_gen2_0_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_gen2_0_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_gen2_0_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_gen2_0_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_gen2_0_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_gen2_0_debug_mem_slave_write),                  //                         .write
		.av_read                (nios2_gen2_0_debug_mem_slave_read),                   //                         .read
		.av_readdata            (nios2_gen2_0_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (nios2_gen2_0_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (nios2_gen2_0_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_gen2_0_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_gen2_0_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (23),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (altpll_0_c0_clk),                                //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),              //                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                      //                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),                   //                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),                  //                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),                 //                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),                 //                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                      //                         .clken
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (23),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) slide_pio_s1_translator (
		.clk                    (altpll_0_c2_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (slide_pio_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (slide_pio_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (slide_pio_s1_agent_m0_read),                    //                         .read
		.uav_write              (slide_pio_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (slide_pio_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (slide_pio_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (slide_pio_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (slide_pio_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (slide_pio_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (slide_pio_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (slide_pio_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (slide_pio_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (slide_pio_s1_write),                            //                         .write
		.av_readdata            (slide_pio_s1_readdata),                         //                         .readdata
		.av_writedata           (slide_pio_s1_writedata),                        //                         .writedata
		.av_chipselect          (slide_pio_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (23),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_0_s1_translator (
		.clk                    (altpll_0_c2_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_0_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (timer_0_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (timer_0_s1_agent_m0_read),                      //                         .read
		.uav_write              (timer_0_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (timer_0_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (timer_0_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (timer_0_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (timer_0_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (timer_0_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (timer_0_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (timer_0_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (timer_0_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (timer_0_s1_write),                              //                         .write
		.av_readdata            (timer_0_s1_readdata),                           //                         .readdata
		.av_writedata           (timer_0_s1_writedata),                          //                         .writedata
		.av_chipselect          (timer_0_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (23),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_0_s1_translator (
		.clk                    (altpll_0_c2_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_0_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (pio_0_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (pio_0_s1_agent_m0_read),                        //                         .read
		.uav_write              (pio_0_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (pio_0_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (pio_0_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (pio_0_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (pio_0_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (pio_0_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (pio_0_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (pio_0_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (pio_0_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (pio_0_s1_write),                                //                         .write
		.av_readdata            (pio_0_s1_readdata),                             //                         .readdata
		.av_writedata           (pio_0_s1_writedata),                            //                         .writedata
		.av_chipselect          (pio_0_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (7),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (23),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (2),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) modular_adc_0_sample_store_csr_translator (
		.clk                    (clk_1_clk_clk),                                         //                      clk.clk
		.reset                  (modular_adc_0_reset_sink_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (modular_adc_0_sample_store_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (modular_adc_0_sample_store_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (modular_adc_0_sample_store_csr_agent_m0_read),          //                         .read
		.uav_write              (modular_adc_0_sample_store_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (modular_adc_0_sample_store_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (modular_adc_0_sample_store_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (modular_adc_0_sample_store_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (modular_adc_0_sample_store_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (modular_adc_0_sample_store_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (modular_adc_0_sample_store_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (modular_adc_0_sample_store_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (modular_adc_0_sample_store_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (modular_adc_0_sample_store_csr_write),                  //                         .write
		.av_read                (modular_adc_0_sample_store_csr_read),                   //                         .read
		.av_readdata            (modular_adc_0_sample_store_csr_readdata),               //                         .readdata
		.av_writedata           (modular_adc_0_sample_store_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (23),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) modular_adc_0_sequencer_csr_translator (
		.clk                    (clk_1_clk_clk),                                        //                      clk.clk
		.reset                  (modular_adc_0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (modular_adc_0_sequencer_csr_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (modular_adc_0_sequencer_csr_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (modular_adc_0_sequencer_csr_agent_m0_read),            //                         .read
		.uav_write              (modular_adc_0_sequencer_csr_agent_m0_write),           //                         .write
		.uav_waitrequest        (modular_adc_0_sequencer_csr_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (modular_adc_0_sequencer_csr_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (modular_adc_0_sequencer_csr_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (modular_adc_0_sequencer_csr_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (modular_adc_0_sequencer_csr_agent_m0_writedata),       //                         .writedata
		.uav_lock               (modular_adc_0_sequencer_csr_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (modular_adc_0_sequencer_csr_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (modular_adc_0_sequencer_csr_address),                  //      avalon_anti_slave_0.address
		.av_write               (modular_adc_0_sequencer_csr_write),                    //                         .write
		.av_read                (modular_adc_0_sequencer_csr_read),                     //                         .read
		.av_readdata            (modular_adc_0_sequencer_csr_readdata),                 //                         .readdata
		.av_writedata           (modular_adc_0_sequencer_csr_writedata),                //                         .writedata
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_QOS_H                 (82),
		.PKT_QOS_L                 (82),
		.PKT_DATA_SIDEBAND_H       (80),
		.PKT_DATA_SIDEBAND_L       (80),
		.PKT_ADDR_SIDEBAND_H       (79),
		.PKT_ADDR_SIDEBAND_L       (79),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_CACHE_H               (98),
		.PKT_CACHE_L               (95),
		.PKT_THREAD_ID_H           (91),
		.PKT_THREAD_ID_L           (91),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_EXCLUSIVE       (64),
		.PKT_TRANS_LOCK            (63),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (65),
		.PKT_ADDR_H                (58),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (59),
		.PKT_TRANS_POSTED          (60),
		.PKT_TRANS_WRITE           (61),
		.PKT_TRANS_READ            (62),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (87),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_data_master_agent (
		.clk                   (altpll_0_c0_clk),                                                             //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios2_gen2_0_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios2_gen2_0_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios2_gen2_0_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios2_gen2_0_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios2_gen2_0_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios2_gen2_0_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_QOS_H                 (82),
		.PKT_QOS_L                 (82),
		.PKT_DATA_SIDEBAND_H       (80),
		.PKT_DATA_SIDEBAND_L       (80),
		.PKT_ADDR_SIDEBAND_H       (79),
		.PKT_ADDR_SIDEBAND_L       (79),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_CACHE_H               (98),
		.PKT_CACHE_L               (95),
		.PKT_THREAD_ID_H           (91),
		.PKT_THREAD_ID_L           (91),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_EXCLUSIVE       (64),
		.PKT_TRANS_LOCK            (63),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (65),
		.PKT_ADDR_H                (58),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (59),
		.PKT_TRANS_POSTED          (60),
		.PKT_TRANS_WRITE           (61),
		.PKT_TRANS_READ            (62),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (87),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_instruction_master_agent (
		.clk                   (altpll_0_c0_clk),                                                                    //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios2_gen2_0_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios2_gen2_0_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios2_gen2_0_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios2_gen2_0_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios2_gen2_0_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios2_gen2_0_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (63),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (65),
		.PKT_ADDR_H                (58),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (59),
		.PKT_TRANS_POSTED          (60),
		.PKT_TRANS_WRITE           (61),
		.PKT_TRANS_READ            (62),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (altpll_0_c2_clk),                                                //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                            //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (altpll_0_c2_clk),                                                //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (altpll_0_c2_clk),                                          //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (63),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (65),
		.PKT_ADDR_H                (58),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (59),
		.PKT_TRANS_POSTED          (60),
		.PKT_TRANS_WRITE           (61),
		.PKT_TRANS_READ            (62),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_0_control_slave_agent (
		.clk                     (altpll_0_c2_clk),                                             //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (sysid_qsys_0_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_qsys_0_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_qsys_0_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_qsys_0_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_qsys_0_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_qsys_0_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_qsys_0_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_qsys_0_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_qsys_0_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_qsys_0_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_qsys_0_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_qsys_0_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_qsys_0_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_qsys_0_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_qsys_0_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_qsys_0_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                     //                .channel
		.rf_sink_ready           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_qsys_0_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_qsys_0_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_qsys_0_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_0_control_slave_agent_rsp_fifo (
		.clk               (altpll_0_c2_clk),                                             //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_0_control_slave_agent_rdata_fifo (
		.clk               (altpll_0_c2_clk),                                       //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_qsys_0_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (63),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (65),
		.PKT_ADDR_H                (58),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (59),
		.PKT_TRANS_POSTED          (60),
		.PKT_TRANS_WRITE           (61),
		.PKT_TRANS_READ            (62),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_flash_0_csr_agent (
		.clk                     (altpll_0_c0_clk),                                     //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (onchip_flash_0_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_flash_0_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_flash_0_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_flash_0_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_flash_0_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_flash_0_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_flash_0_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_flash_0_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_flash_0_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_flash_0_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_flash_0_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_flash_0_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_flash_0_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_flash_0_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_flash_0_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_flash_0_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                             //                .channel
		.rf_sink_ready           (onchip_flash_0_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_flash_0_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_flash_0_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_flash_0_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_flash_0_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_flash_0_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_flash_0_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_flash_0_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_flash_0_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_flash_0_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (onchip_flash_0_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_flash_0_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_flash_0_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_flash_0_csr_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                     //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (onchip_flash_0_csr_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_flash_0_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_flash_0_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_flash_0_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_flash_0_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_flash_0_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_flash_0_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_flash_0_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_flash_0_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_flash_0_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (63),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (65),
		.PKT_ADDR_H                (58),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (59),
		.PKT_TRANS_POSTED          (60),
		.PKT_TRANS_WRITE           (61),
		.PKT_TRANS_READ            (62),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_flash_0_data_agent (
		.clk                     (altpll_0_c0_clk),                                      //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (onchip_flash_0_data_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_flash_0_data_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_flash_0_data_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_flash_0_data_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_flash_0_data_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_flash_0_data_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_flash_0_data_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_flash_0_data_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_flash_0_data_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_flash_0_data_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_flash_0_data_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_flash_0_data_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_flash_0_data_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_flash_0_data_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_flash_0_data_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_flash_0_data_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                              //                .channel
		.rf_sink_ready           (onchip_flash_0_data_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_flash_0_data_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_flash_0_data_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_flash_0_data_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_flash_0_data_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_flash_0_data_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_flash_0_data_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_flash_0_data_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_flash_0_data_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_flash_0_data_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (onchip_flash_0_data_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_flash_0_data_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_flash_0_data_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_flash_0_data_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                      //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (onchip_flash_0_data_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_flash_0_data_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_flash_0_data_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_flash_0_data_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_flash_0_data_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_flash_0_data_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_flash_0_data_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_flash_0_data_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_flash_0_data_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_flash_0_data_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (63),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (65),
		.PKT_ADDR_H                (58),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (59),
		.PKT_TRANS_POSTED          (60),
		.PKT_TRANS_WRITE           (61),
		.PKT_TRANS_READ            (62),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_gen2_0_debug_mem_slave_agent (
		.clk                     (altpll_0_c0_clk),                                               //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_gen2_0_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_gen2_0_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_gen2_0_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_gen2_0_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_gen2_0_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_gen2_0_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_gen2_0_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                       //                .channel
		.rf_sink_ready           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_gen2_0_debug_mem_slave_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                               //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (63),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (65),
		.PKT_ADDR_H                (58),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (59),
		.PKT_TRANS_POSTED          (60),
		.PKT_TRANS_WRITE           (61),
		.PKT_TRANS_READ            (62),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (altpll_0_c0_clk),                                      //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                              //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                      //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (63),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (65),
		.PKT_ADDR_H                (58),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (59),
		.PKT_TRANS_POSTED          (60),
		.PKT_TRANS_WRITE           (61),
		.PKT_TRANS_READ            (62),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) slide_pio_s1_agent (
		.clk                     (altpll_0_c2_clk),                               //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (slide_pio_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (slide_pio_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (slide_pio_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (slide_pio_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (slide_pio_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (slide_pio_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (slide_pio_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (slide_pio_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (slide_pio_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (slide_pio_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (slide_pio_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (slide_pio_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (slide_pio_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (slide_pio_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (slide_pio_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (slide_pio_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_006_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                       //                .channel
		.rf_sink_ready           (slide_pio_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (slide_pio_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (slide_pio_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (slide_pio_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (slide_pio_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (slide_pio_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (slide_pio_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (slide_pio_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (slide_pio_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (slide_pio_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),             //                .error
		.rdata_fifo_src_ready    (slide_pio_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (slide_pio_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (slide_pio_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) slide_pio_s1_agent_rsp_fifo (
		.clk               (altpll_0_c2_clk),                               //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (slide_pio_s1_agent_rf_source_data),             //        in.data
		.in_valid          (slide_pio_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (slide_pio_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (slide_pio_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (slide_pio_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (slide_pio_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (slide_pio_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (slide_pio_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (slide_pio_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (slide_pio_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) slide_pio_s1_agent_rdata_fifo (
		.clk               (altpll_0_c2_clk),                               //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (slide_pio_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (slide_pio_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (slide_pio_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (slide_pio_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (slide_pio_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (slide_pio_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (63),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (65),
		.PKT_ADDR_H                (58),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (59),
		.PKT_TRANS_POSTED          (60),
		.PKT_TRANS_WRITE           (61),
		.PKT_TRANS_READ            (62),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_0_s1_agent (
		.clk                     (altpll_0_c2_clk),                               //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_0_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (timer_0_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (timer_0_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (timer_0_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (timer_0_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (timer_0_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (timer_0_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (timer_0_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (timer_0_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (timer_0_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (timer_0_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (timer_0_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (timer_0_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (timer_0_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (timer_0_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_007_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                       //                .channel
		.rf_sink_ready           (timer_0_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (timer_0_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (timer_0_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (timer_0_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (timer_0_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (timer_0_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (timer_0_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (timer_0_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (timer_0_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (timer_0_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),             //                .error
		.rdata_fifo_src_ready    (timer_0_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_0_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (timer_0_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rsp_fifo (
		.clk               (altpll_0_c2_clk),                               //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rf_source_data),               //        in.data
		.in_valid          (timer_0_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (timer_0_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (timer_0_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (timer_0_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (timer_0_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (timer_0_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (timer_0_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (timer_0_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rdata_fifo (
		.clk               (altpll_0_c2_clk),                               //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (timer_0_s1_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (timer_0_s1_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (timer_0_s1_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (timer_0_s1_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (timer_0_s1_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (63),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (65),
		.PKT_ADDR_H                (58),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (59),
		.PKT_TRANS_POSTED          (60),
		.PKT_TRANS_WRITE           (61),
		.PKT_TRANS_READ            (62),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_0_s1_agent (
		.clk                     (altpll_0_c2_clk),                               //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pio_0_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (pio_0_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (pio_0_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (pio_0_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (pio_0_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (pio_0_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (pio_0_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (pio_0_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (pio_0_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (pio_0_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (pio_0_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (pio_0_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (pio_0_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (pio_0_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (pio_0_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (pio_0_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_008_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                       //                .channel
		.rf_sink_ready           (pio_0_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (pio_0_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (pio_0_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (pio_0_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (pio_0_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (pio_0_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (pio_0_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (pio_0_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (pio_0_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (pio_0_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),             //                .error
		.rdata_fifo_src_ready    (pio_0_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_0_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (pio_0_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_0_s1_agent_rsp_fifo (
		.clk               (altpll_0_c2_clk),                               //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_0_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (pio_0_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (pio_0_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (pio_0_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (pio_0_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (pio_0_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (pio_0_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (pio_0_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (pio_0_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (pio_0_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_0_s1_agent_rdata_fifo (
		.clk               (altpll_0_c2_clk),                               //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_0_s1_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (pio_0_s1_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (pio_0_s1_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (pio_0_s1_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (pio_0_s1_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (pio_0_s1_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (63),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (65),
		.PKT_ADDR_H                (58),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (59),
		.PKT_TRANS_POSTED          (60),
		.PKT_TRANS_WRITE           (61),
		.PKT_TRANS_READ            (62),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) modular_adc_0_sample_store_csr_agent (
		.clk                     (clk_1_clk_clk),                                                   //             clk.clk
		.reset                   (modular_adc_0_reset_sink_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (modular_adc_0_sample_store_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (modular_adc_0_sample_store_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (modular_adc_0_sample_store_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (modular_adc_0_sample_store_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (modular_adc_0_sample_store_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (modular_adc_0_sample_store_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (modular_adc_0_sample_store_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (modular_adc_0_sample_store_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (modular_adc_0_sample_store_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (modular_adc_0_sample_store_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (modular_adc_0_sample_store_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (modular_adc_0_sample_store_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (modular_adc_0_sample_store_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (modular_adc_0_sample_store_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (modular_adc_0_sample_store_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (modular_adc_0_sample_store_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                         //                .channel
		.rf_sink_ready           (modular_adc_0_sample_store_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (modular_adc_0_sample_store_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (modular_adc_0_sample_store_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (modular_adc_0_sample_store_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (modular_adc_0_sample_store_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (modular_adc_0_sample_store_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (modular_adc_0_sample_store_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (modular_adc_0_sample_store_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (modular_adc_0_sample_store_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (modular_adc_0_sample_store_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (modular_adc_0_sample_store_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (modular_adc_0_sample_store_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (modular_adc_0_sample_store_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) modular_adc_0_sample_store_csr_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                                   //       clk.clk
		.reset             (modular_adc_0_reset_sink_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (modular_adc_0_sample_store_csr_agent_rf_source_data),             //        in.data
		.in_valid          (modular_adc_0_sample_store_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (modular_adc_0_sample_store_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (modular_adc_0_sample_store_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (modular_adc_0_sample_store_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (modular_adc_0_sample_store_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (modular_adc_0_sample_store_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (modular_adc_0_sample_store_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (modular_adc_0_sample_store_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (modular_adc_0_sample_store_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) modular_adc_0_sample_store_csr_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                             //       clk.clk
		.reset             (modular_adc_0_reset_sink_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (modular_adc_0_sample_store_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (modular_adc_0_sample_store_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (modular_adc_0_sample_store_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (modular_adc_0_sample_store_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (modular_adc_0_sample_store_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (modular_adc_0_sample_store_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (63),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (65),
		.PKT_ADDR_H                (58),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (59),
		.PKT_TRANS_POSTED          (60),
		.PKT_TRANS_WRITE           (61),
		.PKT_TRANS_READ            (62),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) modular_adc_0_sequencer_csr_agent (
		.clk                     (clk_1_clk_clk),                                                //             clk.clk
		.reset                   (modular_adc_0_reset_sink_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (modular_adc_0_sequencer_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (modular_adc_0_sequencer_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (modular_adc_0_sequencer_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (modular_adc_0_sequencer_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (modular_adc_0_sequencer_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (modular_adc_0_sequencer_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (modular_adc_0_sequencer_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (modular_adc_0_sequencer_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (modular_adc_0_sequencer_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (modular_adc_0_sequencer_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (modular_adc_0_sequencer_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (modular_adc_0_sequencer_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (modular_adc_0_sequencer_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (modular_adc_0_sequencer_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (modular_adc_0_sequencer_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (modular_adc_0_sequencer_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                      //                .channel
		.rf_sink_ready           (modular_adc_0_sequencer_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (modular_adc_0_sequencer_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (modular_adc_0_sequencer_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (modular_adc_0_sequencer_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (modular_adc_0_sequencer_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (modular_adc_0_sequencer_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (modular_adc_0_sequencer_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (modular_adc_0_sequencer_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (modular_adc_0_sequencer_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (modular_adc_0_sequencer_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (modular_adc_0_sequencer_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (modular_adc_0_sequencer_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (modular_adc_0_sequencer_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) modular_adc_0_sequencer_csr_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                                //       clk.clk
		.reset             (modular_adc_0_reset_sink_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (modular_adc_0_sequencer_csr_agent_rf_source_data),             //        in.data
		.in_valid          (modular_adc_0_sequencer_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (modular_adc_0_sequencer_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (modular_adc_0_sequencer_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (modular_adc_0_sequencer_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (modular_adc_0_sequencer_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (modular_adc_0_sequencer_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (modular_adc_0_sequencer_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (modular_adc_0_sequencer_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (modular_adc_0_sequencer_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) modular_adc_0_sequencer_csr_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                          //       clk.clk
		.reset             (modular_adc_0_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (modular_adc_0_sequencer_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (modular_adc_0_sequencer_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (modular_adc_0_sequencer_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (modular_adc_0_sequencer_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (modular_adc_0_sequencer_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (modular_adc_0_sequencer_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	core_mm_interconnect_0_router router (
		.sink_ready         (nios2_gen2_0_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                                 //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                                //       src.ready
		.src_valid          (router_src_valid),                                //          .valid
		.src_data           (router_src_data),                                 //          .data
		.src_channel        (router_src_channel),                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                           //          .endofpacket
	);

	core_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_gen2_0_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                                        //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                                   //       src.ready
		.src_valid          (router_001_src_valid),                                   //          .valid
		.src_data           (router_001_src_data),                                    //          .data
		.src_channel        (router_001_src_channel),                                 //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                              //          .endofpacket
	);

	core_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c2_clk),                                      //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_002_src_ready),                                 //       src.ready
		.src_valid          (router_002_src_valid),                                 //          .valid
		.src_data           (router_002_src_data),                                  //          .data
		.src_channel        (router_002_src_channel),                               //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                            //          .endofpacket
	);

	core_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (sysid_qsys_0_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_0_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_0_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_0_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_0_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c2_clk),                                   //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_003_src_ready),                              //       src.ready
		.src_valid          (router_003_src_valid),                              //          .valid
		.src_data           (router_003_src_data),                               //          .data
		.src_channel        (router_003_src_channel),                            //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                         //          .endofpacket
	);

	core_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (onchip_flash_0_csr_agent_rp_ready),              //      sink.ready
		.sink_valid         (onchip_flash_0_csr_agent_rp_valid),              //          .valid
		.sink_data          (onchip_flash_0_csr_agent_rp_data),               //          .data
		.sink_startofpacket (onchip_flash_0_csr_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (onchip_flash_0_csr_agent_rp_endofpacket),        //          .endofpacket
		.clk                (altpll_0_c0_clk),                                //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                           //       src.ready
		.src_valid          (router_004_src_valid),                           //          .valid
		.src_data           (router_004_src_data),                            //          .data
		.src_channel        (router_004_src_channel),                         //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                      //          .endofpacket
	);

	core_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (onchip_flash_0_data_agent_rp_ready),             //      sink.ready
		.sink_valid         (onchip_flash_0_data_agent_rp_valid),             //          .valid
		.sink_data          (onchip_flash_0_data_agent_rp_data),              //          .data
		.sink_startofpacket (onchip_flash_0_data_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (onchip_flash_0_data_agent_rp_endofpacket),       //          .endofpacket
		.clk                (altpll_0_c0_clk),                                //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                           //       src.ready
		.src_valid          (router_005_src_valid),                           //          .valid
		.src_data           (router_005_src_data),                            //          .data
		.src_channel        (router_005_src_channel),                         //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                      //          .endofpacket
	);

	core_mm_interconnect_0_router_005 router_006 (
		.sink_ready         (nios2_gen2_0_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                                     //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_006_src_ready),                                //       src.ready
		.src_valid          (router_006_src_valid),                                //          .valid
		.src_data           (router_006_src_data),                                 //          .data
		.src_channel        (router_006_src_channel),                              //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                           //          .endofpacket
	);

	core_mm_interconnect_0_router_005 router_007 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),             //          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),              //          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (altpll_0_c0_clk),                                //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                           //       src.ready
		.src_valid          (router_007_src_valid),                           //          .valid
		.src_data           (router_007_src_data),                            //          .data
		.src_channel        (router_007_src_channel),                         //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                      //          .endofpacket
	);

	core_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (slide_pio_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (slide_pio_s1_agent_rp_valid),                   //          .valid
		.sink_data          (slide_pio_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (slide_pio_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (slide_pio_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (altpll_0_c2_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                          //       src.ready
		.src_valid          (router_008_src_valid),                          //          .valid
		.src_data           (router_008_src_data),                           //          .data
		.src_channel        (router_008_src_channel),                        //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                     //          .endofpacket
	);

	core_mm_interconnect_0_router_002 router_009 (
		.sink_ready         (timer_0_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (timer_0_s1_agent_rp_valid),                     //          .valid
		.sink_data          (timer_0_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (timer_0_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (timer_0_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (altpll_0_c2_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                          //       src.ready
		.src_valid          (router_009_src_valid),                          //          .valid
		.src_data           (router_009_src_data),                           //          .data
		.src_channel        (router_009_src_channel),                        //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                     //          .endofpacket
	);

	core_mm_interconnect_0_router_002 router_010 (
		.sink_ready         (pio_0_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (pio_0_s1_agent_rp_valid),                       //          .valid
		.sink_data          (pio_0_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (pio_0_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (pio_0_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (altpll_0_c2_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                          //       src.ready
		.src_valid          (router_010_src_valid),                          //          .valid
		.src_data           (router_010_src_data),                           //          .data
		.src_channel        (router_010_src_channel),                        //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                     //          .endofpacket
	);

	core_mm_interconnect_0_router_002 router_011 (
		.sink_ready         (modular_adc_0_sample_store_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (modular_adc_0_sample_store_csr_agent_rp_valid),         //          .valid
		.sink_data          (modular_adc_0_sample_store_csr_agent_rp_data),          //          .data
		.sink_startofpacket (modular_adc_0_sample_store_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (modular_adc_0_sample_store_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_1_clk_clk),                                         //       clk.clk
		.reset              (modular_adc_0_reset_sink_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_011_src_ready),                                  //       src.ready
		.src_valid          (router_011_src_valid),                                  //          .valid
		.src_data           (router_011_src_data),                                   //          .data
		.src_channel        (router_011_src_channel),                                //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                             //          .endofpacket
	);

	core_mm_interconnect_0_router_002 router_012 (
		.sink_ready         (modular_adc_0_sequencer_csr_agent_rp_ready),           //      sink.ready
		.sink_valid         (modular_adc_0_sequencer_csr_agent_rp_valid),           //          .valid
		.sink_data          (modular_adc_0_sequencer_csr_agent_rp_data),            //          .data
		.sink_startofpacket (modular_adc_0_sequencer_csr_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (modular_adc_0_sequencer_csr_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_1_clk_clk),                                        //       clk.clk
		.reset              (modular_adc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                 //       src.ready
		.src_valid          (router_012_src_valid),                                 //          .valid
		.src_data           (router_012_src_data),                                  //          .data
		.src_channel        (router_012_src_channel),                               //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                            //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (87),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (83),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (65),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (60),
		.PKT_TRANS_WRITE           (61),
		.MAX_OUTSTANDING_RESPONSES (6),
		.PIPELINED                 (0),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (11),
		.VALID_WIDTH               (11),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_gen2_0_data_master_limiter (
		.clk                    (altpll_0_c0_clk),                                        //       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                       //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                       //          .valid
		.cmd_sink_data          (router_src_data),                                        //          .data
		.cmd_sink_channel       (router_src_channel),                                     //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                               //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                 //          .endofpacket
		.cmd_src_ready          (nios2_gen2_0_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_gen2_0_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_gen2_0_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_gen2_0_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_gen2_0_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                      //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                      //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                    //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                       //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                              //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                //          .endofpacket
		.rsp_src_ready          (nios2_gen2_0_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_gen2_0_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_gen2_0_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_gen2_0_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_gen2_0_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_gen2_0_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_gen2_0_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (87),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (83),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (65),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (60),
		.PKT_TRANS_WRITE           (61),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (11),
		.VALID_WIDTH               (11),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_gen2_0_instruction_master_limiter (
		.clk                    (altpll_0_c0_clk),                                               //       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                          //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                          //          .valid
		.cmd_sink_data          (router_001_src_data),                                           //          .data
		.cmd_sink_channel       (router_001_src_channel),                                        //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                  //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                    //          .endofpacket
		.cmd_src_ready          (nios2_gen2_0_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_gen2_0_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_gen2_0_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_gen2_0_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_gen2_0_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                         //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                         //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                       //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                          //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                 //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                   //          .endofpacket
		.rsp_src_ready          (nios2_gen2_0_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_gen2_0_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_gen2_0_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_gen2_0_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_gen2_0_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_gen2_0_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_gen2_0_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	core_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (altpll_0_c0_clk),                                        //        clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready          (nios2_gen2_0_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (nios2_gen2_0_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (nios2_gen2_0_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (nios2_gen2_0_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (nios2_gen2_0_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (nios2_gen2_0_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                   //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                   //           .valid
		.src0_data           (cmd_demux_src0_data),                                    //           .data
		.src0_channel        (cmd_demux_src0_channel),                                 //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                           //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                             //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                   //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                   //           .valid
		.src1_data           (cmd_demux_src1_data),                                    //           .data
		.src1_channel        (cmd_demux_src1_channel),                                 //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                           //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                             //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                   //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                   //           .valid
		.src2_data           (cmd_demux_src2_data),                                    //           .data
		.src2_channel        (cmd_demux_src2_channel),                                 //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                           //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                             //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                   //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                   //           .valid
		.src3_data           (cmd_demux_src3_data),                                    //           .data
		.src3_channel        (cmd_demux_src3_channel),                                 //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                           //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                             //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                   //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                   //           .valid
		.src4_data           (cmd_demux_src4_data),                                    //           .data
		.src4_channel        (cmd_demux_src4_channel),                                 //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                           //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                             //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                   //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                   //           .valid
		.src5_data           (cmd_demux_src5_data),                                    //           .data
		.src5_channel        (cmd_demux_src5_channel),                                 //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                           //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                             //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                   //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                   //           .valid
		.src6_data           (cmd_demux_src6_data),                                    //           .data
		.src6_channel        (cmd_demux_src6_channel),                                 //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                           //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                             //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                   //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                   //           .valid
		.src7_data           (cmd_demux_src7_data),                                    //           .data
		.src7_channel        (cmd_demux_src7_channel),                                 //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                           //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                             //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                   //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                   //           .valid
		.src8_data           (cmd_demux_src8_data),                                    //           .data
		.src8_channel        (cmd_demux_src8_channel),                                 //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                           //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                             //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                   //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                   //           .valid
		.src9_data           (cmd_demux_src9_data),                                    //           .data
		.src9_channel        (cmd_demux_src9_channel),                                 //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                           //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                             //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                  //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                  //           .valid
		.src10_data          (cmd_demux_src10_data),                                   //           .data
		.src10_channel       (cmd_demux_src10_channel),                                //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                          //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket)                             //           .endofpacket
	);

	core_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (altpll_0_c0_clk),                                               //        clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (nios2_gen2_0_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (nios2_gen2_0_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (nios2_gen2_0_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (nios2_gen2_0_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (nios2_gen2_0_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (nios2_gen2_0_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                      //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                      //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                       //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                    //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                              //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                      //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                      //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                       //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                    //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                              //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                                //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                      //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                      //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                       //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                    //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                              //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket)                                 //           .endofpacket
	);

	core_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (altpll_0_c2_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_src_valid),                             //          .valid
		.src_data            (cmd_mux_src_data),                              //          .data
		.src_channel         (cmd_mux_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_out_valid),                             //          .valid
		.sink0_channel       (crosser_out_channel),                           //          .channel
		.sink0_data          (crosser_out_data),                              //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                        //          .endofpacket
	);

	core_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (altpll_0_c2_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                         //          .valid
		.src_data            (cmd_mux_001_src_data),                          //          .data
		.src_channel         (cmd_mux_001_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                         //          .valid
		.sink0_channel       (crosser_001_out_channel),                       //          .channel
		.sink0_data          (crosser_001_out_data),                          //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                    //          .endofpacket
	);

	core_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (altpll_0_c0_clk),                                //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                          //          .valid
		.src_data            (cmd_mux_002_src_data),                           //          .data
		.src_channel         (cmd_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                         //          .channel
		.sink0_data          (cmd_demux_src2_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                      //          .endofpacket
	);

	core_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (altpll_0_c0_clk),                                //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                          //          .valid
		.src_data            (cmd_mux_003_src_data),                           //          .data
		.src_channel         (cmd_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                         //          .channel
		.sink0_data          (cmd_demux_src3_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                  //          .endofpacket
	);

	core_mm_interconnect_0_cmd_mux_003 cmd_mux_004 (
		.clk                 (altpll_0_c0_clk),                                //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                          //          .valid
		.src_data            (cmd_mux_004_src_data),                           //          .data
		.src_channel         (cmd_mux_004_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                         //          .channel
		.sink0_data          (cmd_demux_src4_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                  //          .endofpacket
	);

	core_mm_interconnect_0_cmd_mux_003 cmd_mux_005 (
		.clk                 (altpll_0_c0_clk),                                //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                          //          .valid
		.src_data            (cmd_mux_005_src_data),                           //          .data
		.src_channel         (cmd_mux_005_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                         //          .channel
		.sink0_data          (cmd_demux_src5_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                  //          .endofpacket
	);

	core_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (altpll_0_c2_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                         //          .valid
		.src_data            (cmd_mux_006_src_data),                          //          .data
		.src_channel         (cmd_mux_006_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                         //          .valid
		.sink0_channel       (crosser_002_out_channel),                       //          .channel
		.sink0_data          (crosser_002_out_data),                          //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)                    //          .endofpacket
	);

	core_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (altpll_0_c2_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                         //          .valid
		.src_data            (cmd_mux_007_src_data),                          //          .data
		.src_channel         (cmd_mux_007_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                         //          .valid
		.sink0_channel       (crosser_003_out_channel),                       //          .channel
		.sink0_data          (crosser_003_out_data),                          //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)                    //          .endofpacket
	);

	core_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (altpll_0_c2_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                         //          .valid
		.src_data            (cmd_mux_008_src_data),                          //          .data
		.src_channel         (cmd_mux_008_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                         //          .valid
		.sink0_channel       (crosser_004_out_channel),                       //          .channel
		.sink0_data          (crosser_004_out_data),                          //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket)                    //          .endofpacket
	);

	core_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_1_clk_clk),                                        //       clk.clk
		.reset               (modular_adc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                //          .valid
		.src_data            (cmd_mux_009_src_data),                                 //          .data
		.src_channel         (cmd_mux_009_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                                //     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                                //          .valid
		.sink0_channel       (crosser_005_out_channel),                              //          .channel
		.sink0_data          (crosser_005_out_data),                                 //          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket)                           //          .endofpacket
	);

	core_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (clk_1_clk_clk),                                        //       clk.clk
		.reset               (modular_adc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                //          .valid
		.src_data            (cmd_mux_010_src_data),                                 //          .data
		.src_channel         (cmd_mux_010_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (crosser_006_out_ready),                                //     sink0.ready
		.sink0_valid         (crosser_006_out_valid),                                //          .valid
		.sink0_channel       (crosser_006_out_channel),                              //          .channel
		.sink0_data          (crosser_006_out_data),                                 //          .data
		.sink0_startofpacket (crosser_006_out_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (crosser_006_out_endofpacket)                           //          .endofpacket
	);

	core_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (altpll_0_c2_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                          //      sink.ready
		.sink_channel       (router_002_src_channel),                        //          .channel
		.sink_data          (router_002_src_data),                           //          .data
		.sink_startofpacket (router_002_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_002_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_src0_data),                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                     //          .endofpacket
	);

	core_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (altpll_0_c2_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                          //      sink.ready
		.sink_channel       (router_003_src_channel),                        //          .channel
		.sink_data          (router_003_src_data),                           //          .data
		.sink_startofpacket (router_003_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_003_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_001_src0_data),                       //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                 //          .endofpacket
	);

	core_mm_interconnect_0_rsp_demux_002 rsp_demux_002 (
		.clk                (altpll_0_c0_clk),                                //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                           //      sink.ready
		.sink_channel       (router_004_src_channel),                         //          .channel
		.sink_data          (router_004_src_data),                            //          .data
		.sink_startofpacket (router_004_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_004_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_002_src0_data),                        //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                  //          .endofpacket
	);

	core_mm_interconnect_0_rsp_demux_003 rsp_demux_003 (
		.clk                (altpll_0_c0_clk),                                //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                           //      sink.ready
		.sink_channel       (router_005_src_channel),                         //          .channel
		.sink_data          (router_005_src_data),                            //          .data
		.sink_startofpacket (router_005_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_005_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_003_src0_data),                        //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_003_src1_data),                        //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                  //          .endofpacket
	);

	core_mm_interconnect_0_rsp_demux_003 rsp_demux_004 (
		.clk                (altpll_0_c0_clk),                                //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                           //      sink.ready
		.sink_channel       (router_006_src_channel),                         //          .channel
		.sink_data          (router_006_src_data),                            //          .data
		.sink_startofpacket (router_006_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_006_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_004_src0_data),                        //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_004_src1_data),                        //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                  //          .endofpacket
	);

	core_mm_interconnect_0_rsp_demux_003 rsp_demux_005 (
		.clk                (altpll_0_c0_clk),                                //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                           //      sink.ready
		.sink_channel       (router_007_src_channel),                         //          .channel
		.sink_data          (router_007_src_data),                            //          .data
		.sink_startofpacket (router_007_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_007_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_005_src0_data),                        //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_005_src1_data),                        //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                  //          .endofpacket
	);

	core_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (altpll_0_c2_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                          //      sink.ready
		.sink_channel       (router_008_src_channel),                        //          .channel
		.sink_data          (router_008_src_data),                           //          .data
		.sink_startofpacket (router_008_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_008_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_006_src0_data),                       //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                 //          .endofpacket
	);

	core_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (altpll_0_c2_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                          //      sink.ready
		.sink_channel       (router_009_src_channel),                        //          .channel
		.sink_data          (router_009_src_data),                           //          .data
		.sink_startofpacket (router_009_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_009_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_007_src0_data),                       //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                 //          .endofpacket
	);

	core_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (altpll_0_c2_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                          //      sink.ready
		.sink_channel       (router_010_src_channel),                        //          .channel
		.sink_data          (router_010_src_data),                           //          .data
		.sink_startofpacket (router_010_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_010_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_008_src0_data),                       //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                 //          .endofpacket
	);

	core_mm_interconnect_0_rsp_demux_009 rsp_demux_009 (
		.clk                (clk_1_clk_clk),                                        //       clk.clk
		.reset              (modular_adc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                 //      sink.ready
		.sink_channel       (router_011_src_channel),                               //          .channel
		.sink_data          (router_011_src_data),                                  //          .data
		.sink_startofpacket (router_011_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_011_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_009_src0_data),                              //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                        //          .endofpacket
	);

	core_mm_interconnect_0_rsp_demux_009 rsp_demux_010 (
		.clk                (clk_1_clk_clk),                                        //       clk.clk
		.reset              (modular_adc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                 //      sink.ready
		.sink_channel       (router_012_src_channel),                               //          .channel
		.sink_data          (router_012_src_data),                                  //          .data
		.sink_startofpacket (router_012_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_012_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_010_src0_data),                              //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                        //          .endofpacket
	);

	core_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (altpll_0_c0_clk),                                //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                              //       src.ready
		.src_valid            (rsp_mux_src_valid),                              //          .valid
		.src_data             (rsp_mux_src_data),                               //          .data
		.src_channel          (rsp_mux_src_channel),                            //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready          (crosser_007_out_ready),                          //     sink0.ready
		.sink0_valid          (crosser_007_out_valid),                          //          .valid
		.sink0_channel        (crosser_007_out_channel),                        //          .channel
		.sink0_data           (crosser_007_out_data),                           //          .data
		.sink0_startofpacket  (crosser_007_out_startofpacket),                  //          .startofpacket
		.sink0_endofpacket    (crosser_007_out_endofpacket),                    //          .endofpacket
		.sink1_ready          (crosser_008_out_ready),                          //     sink1.ready
		.sink1_valid          (crosser_008_out_valid),                          //          .valid
		.sink1_channel        (crosser_008_out_channel),                        //          .channel
		.sink1_data           (crosser_008_out_data),                           //          .data
		.sink1_startofpacket  (crosser_008_out_startofpacket),                  //          .startofpacket
		.sink1_endofpacket    (crosser_008_out_endofpacket),                    //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                       //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                       //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                     //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                        //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                 //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                       //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                       //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                     //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                        //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                 //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                       //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                       //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                     //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                        //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                 //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                       //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                       //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                     //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                        //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                 //          .endofpacket
		.sink6_ready          (crosser_009_out_ready),                          //     sink6.ready
		.sink6_valid          (crosser_009_out_valid),                          //          .valid
		.sink6_channel        (crosser_009_out_channel),                        //          .channel
		.sink6_data           (crosser_009_out_data),                           //          .data
		.sink6_startofpacket  (crosser_009_out_startofpacket),                  //          .startofpacket
		.sink6_endofpacket    (crosser_009_out_endofpacket),                    //          .endofpacket
		.sink7_ready          (crosser_010_out_ready),                          //     sink7.ready
		.sink7_valid          (crosser_010_out_valid),                          //          .valid
		.sink7_channel        (crosser_010_out_channel),                        //          .channel
		.sink7_data           (crosser_010_out_data),                           //          .data
		.sink7_startofpacket  (crosser_010_out_startofpacket),                  //          .startofpacket
		.sink7_endofpacket    (crosser_010_out_endofpacket),                    //          .endofpacket
		.sink8_ready          (crosser_011_out_ready),                          //     sink8.ready
		.sink8_valid          (crosser_011_out_valid),                          //          .valid
		.sink8_channel        (crosser_011_out_channel),                        //          .channel
		.sink8_data           (crosser_011_out_data),                           //          .data
		.sink8_startofpacket  (crosser_011_out_startofpacket),                  //          .startofpacket
		.sink8_endofpacket    (crosser_011_out_endofpacket),                    //          .endofpacket
		.sink9_ready          (crosser_012_out_ready),                          //     sink9.ready
		.sink9_valid          (crosser_012_out_valid),                          //          .valid
		.sink9_channel        (crosser_012_out_channel),                        //          .channel
		.sink9_data           (crosser_012_out_data),                           //          .data
		.sink9_startofpacket  (crosser_012_out_startofpacket),                  //          .startofpacket
		.sink9_endofpacket    (crosser_012_out_endofpacket),                    //          .endofpacket
		.sink10_ready         (crosser_013_out_ready),                          //    sink10.ready
		.sink10_valid         (crosser_013_out_valid),                          //          .valid
		.sink10_channel       (crosser_013_out_channel),                        //          .channel
		.sink10_data          (crosser_013_out_data),                           //          .data
		.sink10_startofpacket (crosser_013_out_startofpacket),                  //          .startofpacket
		.sink10_endofpacket   (crosser_013_out_endofpacket)                     //          .endofpacket
	);

	core_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (altpll_0_c0_clk),                                //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                          //          .valid
		.src_data            (rsp_mux_001_src_data),                           //          .data
		.src_channel         (rsp_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_003_src1_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_003_src1_valid),                       //          .valid
		.sink0_channel       (rsp_demux_003_src1_channel),                     //          .channel
		.sink0_data          (rsp_demux_003_src1_data),                        //          .data
		.sink0_startofpacket (rsp_demux_003_src1_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_003_src1_endofpacket),                 //          .endofpacket
		.sink1_ready         (rsp_demux_004_src1_ready),                       //     sink1.ready
		.sink1_valid         (rsp_demux_004_src1_valid),                       //          .valid
		.sink1_channel       (rsp_demux_004_src1_channel),                     //          .channel
		.sink1_data          (rsp_demux_004_src1_data),                        //          .data
		.sink1_startofpacket (rsp_demux_004_src1_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (rsp_demux_004_src1_endofpacket),                 //          .endofpacket
		.sink2_ready         (rsp_demux_005_src1_ready),                       //     sink2.ready
		.sink2_valid         (rsp_demux_005_src1_valid),                       //          .valid
		.sink2_channel       (rsp_demux_005_src1_channel),                     //          .channel
		.sink2_data          (rsp_demux_005_src1_data),                        //          .data
		.sink2_startofpacket (rsp_demux_005_src1_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (rsp_demux_005_src1_endofpacket)                  //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (11),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (altpll_0_c0_clk),                                //        in_clk.clk
		.in_reset          (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_0_c2_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),  // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                           //            in.ready
		.in_valid          (cmd_demux_src0_valid),                           //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                   //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                     //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                         //              .channel
		.in_data           (cmd_demux_src0_data),                            //              .data
		.out_ready         (crosser_out_ready),                              //           out.ready
		.out_valid         (crosser_out_valid),                              //              .valid
		.out_startofpacket (crosser_out_startofpacket),                      //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                        //              .endofpacket
		.out_channel       (crosser_out_channel),                            //              .channel
		.out_data          (crosser_out_data),                               //              .data
		.in_empty          (1'b0),                                           //   (terminated)
		.in_error          (1'b0),                                           //   (terminated)
		.out_empty         (),                                               //   (terminated)
		.out_error         ()                                                //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (11),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (altpll_0_c0_clk),                                //        in_clk.clk
		.in_reset          (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_0_c2_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),  // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                           //            in.ready
		.in_valid          (cmd_demux_src1_valid),                           //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                   //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                     //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                         //              .channel
		.in_data           (cmd_demux_src1_data),                            //              .data
		.out_ready         (crosser_001_out_ready),                          //           out.ready
		.out_valid         (crosser_001_out_valid),                          //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                  //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                    //              .endofpacket
		.out_channel       (crosser_001_out_channel),                        //              .channel
		.out_data          (crosser_001_out_data),                           //              .data
		.in_empty          (1'b0),                                           //   (terminated)
		.in_error          (1'b0),                                           //   (terminated)
		.out_empty         (),                                               //   (terminated)
		.out_error         ()                                                //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (11),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (altpll_0_c0_clk),                                //        in_clk.clk
		.in_reset          (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_0_c2_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),  // out_clk_reset.reset
		.in_ready          (cmd_demux_src6_ready),                           //            in.ready
		.in_valid          (cmd_demux_src6_valid),                           //              .valid
		.in_startofpacket  (cmd_demux_src6_startofpacket),                   //              .startofpacket
		.in_endofpacket    (cmd_demux_src6_endofpacket),                     //              .endofpacket
		.in_channel        (cmd_demux_src6_channel),                         //              .channel
		.in_data           (cmd_demux_src6_data),                            //              .data
		.out_ready         (crosser_002_out_ready),                          //           out.ready
		.out_valid         (crosser_002_out_valid),                          //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                  //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                    //              .endofpacket
		.out_channel       (crosser_002_out_channel),                        //              .channel
		.out_data          (crosser_002_out_data),                           //              .data
		.in_empty          (1'b0),                                           //   (terminated)
		.in_error          (1'b0),                                           //   (terminated)
		.out_empty         (),                                               //   (terminated)
		.out_error         ()                                                //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (11),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (altpll_0_c0_clk),                                //        in_clk.clk
		.in_reset          (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_0_c2_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),  // out_clk_reset.reset
		.in_ready          (cmd_demux_src7_ready),                           //            in.ready
		.in_valid          (cmd_demux_src7_valid),                           //              .valid
		.in_startofpacket  (cmd_demux_src7_startofpacket),                   //              .startofpacket
		.in_endofpacket    (cmd_demux_src7_endofpacket),                     //              .endofpacket
		.in_channel        (cmd_demux_src7_channel),                         //              .channel
		.in_data           (cmd_demux_src7_data),                            //              .data
		.out_ready         (crosser_003_out_ready),                          //           out.ready
		.out_valid         (crosser_003_out_valid),                          //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                  //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                    //              .endofpacket
		.out_channel       (crosser_003_out_channel),                        //              .channel
		.out_data          (crosser_003_out_data),                           //              .data
		.in_empty          (1'b0),                                           //   (terminated)
		.in_error          (1'b0),                                           //   (terminated)
		.out_empty         (),                                               //   (terminated)
		.out_error         ()                                                //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (11),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (altpll_0_c0_clk),                                //        in_clk.clk
		.in_reset          (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_0_c2_clk),                                //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),  // out_clk_reset.reset
		.in_ready          (cmd_demux_src8_ready),                           //            in.ready
		.in_valid          (cmd_demux_src8_valid),                           //              .valid
		.in_startofpacket  (cmd_demux_src8_startofpacket),                   //              .startofpacket
		.in_endofpacket    (cmd_demux_src8_endofpacket),                     //              .endofpacket
		.in_channel        (cmd_demux_src8_channel),                         //              .channel
		.in_data           (cmd_demux_src8_data),                            //              .data
		.out_ready         (crosser_004_out_ready),                          //           out.ready
		.out_valid         (crosser_004_out_valid),                          //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                  //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                    //              .endofpacket
		.out_channel       (crosser_004_out_channel),                        //              .channel
		.out_data          (crosser_004_out_data),                           //              .data
		.in_empty          (1'b0),                                           //   (terminated)
		.in_error          (1'b0),                                           //   (terminated)
		.out_empty         (),                                               //   (terminated)
		.out_error         ()                                                //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (11),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (altpll_0_c0_clk),                                      //        in_clk.clk
		.in_reset          (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                        //       out_clk.clk
		.out_reset         (modular_adc_0_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src9_ready),                                 //            in.ready
		.in_valid          (cmd_demux_src9_valid),                                 //              .valid
		.in_startofpacket  (cmd_demux_src9_startofpacket),                         //              .startofpacket
		.in_endofpacket    (cmd_demux_src9_endofpacket),                           //              .endofpacket
		.in_channel        (cmd_demux_src9_channel),                               //              .channel
		.in_data           (cmd_demux_src9_data),                                  //              .data
		.out_ready         (crosser_005_out_ready),                                //           out.ready
		.out_valid         (crosser_005_out_valid),                                //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_005_out_channel),                              //              .channel
		.out_data          (crosser_005_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (11),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (altpll_0_c0_clk),                                      //        in_clk.clk
		.in_reset          (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                        //       out_clk.clk
		.out_reset         (modular_adc_0_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src10_ready),                                //            in.ready
		.in_valid          (cmd_demux_src10_valid),                                //              .valid
		.in_startofpacket  (cmd_demux_src10_startofpacket),                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src10_endofpacket),                          //              .endofpacket
		.in_channel        (cmd_demux_src10_channel),                              //              .channel
		.in_data           (cmd_demux_src10_data),                                 //              .data
		.out_ready         (crosser_006_out_ready),                                //           out.ready
		.out_valid         (crosser_006_out_valid),                                //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_006_out_channel),                              //              .channel
		.out_data          (crosser_006_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (11),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (altpll_0_c2_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),  //  in_clk_reset.reset
		.out_clk           (altpll_0_c0_clk),                                //       out_clk.clk
		.out_reset         (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                           //            in.ready
		.in_valid          (rsp_demux_src0_valid),                           //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                   //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                     //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                         //              .channel
		.in_data           (rsp_demux_src0_data),                            //              .data
		.out_ready         (crosser_007_out_ready),                          //           out.ready
		.out_valid         (crosser_007_out_valid),                          //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                  //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                    //              .endofpacket
		.out_channel       (crosser_007_out_channel),                        //              .channel
		.out_data          (crosser_007_out_data),                           //              .data
		.in_empty          (1'b0),                                           //   (terminated)
		.in_error          (1'b0),                                           //   (terminated)
		.out_empty         (),                                               //   (terminated)
		.out_error         ()                                                //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (11),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (altpll_0_c2_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),  //  in_clk_reset.reset
		.out_clk           (altpll_0_c0_clk),                                //       out_clk.clk
		.out_reset         (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                       //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                       //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),               //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                 //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                     //              .channel
		.in_data           (rsp_demux_001_src0_data),                        //              .data
		.out_ready         (crosser_008_out_ready),                          //           out.ready
		.out_valid         (crosser_008_out_valid),                          //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                  //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                    //              .endofpacket
		.out_channel       (crosser_008_out_channel),                        //              .channel
		.out_data          (crosser_008_out_data),                           //              .data
		.in_empty          (1'b0),                                           //   (terminated)
		.in_error          (1'b0),                                           //   (terminated)
		.out_empty         (),                                               //   (terminated)
		.out_error         ()                                                //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (11),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (altpll_0_c2_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),  //  in_clk_reset.reset
		.out_clk           (altpll_0_c0_clk),                                //       out_clk.clk
		.out_reset         (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                       //            in.ready
		.in_valid          (rsp_demux_006_src0_valid),                       //              .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),               //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                 //              .endofpacket
		.in_channel        (rsp_demux_006_src0_channel),                     //              .channel
		.in_data           (rsp_demux_006_src0_data),                        //              .data
		.out_ready         (crosser_009_out_ready),                          //           out.ready
		.out_valid         (crosser_009_out_valid),                          //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                  //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                    //              .endofpacket
		.out_channel       (crosser_009_out_channel),                        //              .channel
		.out_data          (crosser_009_out_data),                           //              .data
		.in_empty          (1'b0),                                           //   (terminated)
		.in_error          (1'b0),                                           //   (terminated)
		.out_empty         (),                                               //   (terminated)
		.out_error         ()                                                //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (11),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (altpll_0_c2_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),  //  in_clk_reset.reset
		.out_clk           (altpll_0_c0_clk),                                //       out_clk.clk
		.out_reset         (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_007_src0_ready),                       //            in.ready
		.in_valid          (rsp_demux_007_src0_valid),                       //              .valid
		.in_startofpacket  (rsp_demux_007_src0_startofpacket),               //              .startofpacket
		.in_endofpacket    (rsp_demux_007_src0_endofpacket),                 //              .endofpacket
		.in_channel        (rsp_demux_007_src0_channel),                     //              .channel
		.in_data           (rsp_demux_007_src0_data),                        //              .data
		.out_ready         (crosser_010_out_ready),                          //           out.ready
		.out_valid         (crosser_010_out_valid),                          //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                  //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                    //              .endofpacket
		.out_channel       (crosser_010_out_channel),                        //              .channel
		.out_data          (crosser_010_out_data),                           //              .data
		.in_empty          (1'b0),                                           //   (terminated)
		.in_error          (1'b0),                                           //   (terminated)
		.out_empty         (),                                               //   (terminated)
		.out_error         ()                                                //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (11),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (altpll_0_c2_clk),                                //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),  //  in_clk_reset.reset
		.out_clk           (altpll_0_c0_clk),                                //       out_clk.clk
		.out_reset         (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_008_src0_ready),                       //            in.ready
		.in_valid          (rsp_demux_008_src0_valid),                       //              .valid
		.in_startofpacket  (rsp_demux_008_src0_startofpacket),               //              .startofpacket
		.in_endofpacket    (rsp_demux_008_src0_endofpacket),                 //              .endofpacket
		.in_channel        (rsp_demux_008_src0_channel),                     //              .channel
		.in_data           (rsp_demux_008_src0_data),                        //              .data
		.out_ready         (crosser_011_out_ready),                          //           out.ready
		.out_valid         (crosser_011_out_valid),                          //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                  //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                    //              .endofpacket
		.out_channel       (crosser_011_out_channel),                        //              .channel
		.out_data          (crosser_011_out_data),                           //              .data
		.in_empty          (1'b0),                                           //   (terminated)
		.in_error          (1'b0),                                           //   (terminated)
		.out_empty         (),                                               //   (terminated)
		.out_error         ()                                                //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (11),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_012 (
		.in_clk            (clk_1_clk_clk),                                        //        in_clk.clk
		.in_reset          (modular_adc_0_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_0_c0_clk),                                      //       out_clk.clk
		.out_reset         (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (rsp_demux_009_src0_ready),                             //            in.ready
		.in_valid          (rsp_demux_009_src0_valid),                             //              .valid
		.in_startofpacket  (rsp_demux_009_src0_startofpacket),                     //              .startofpacket
		.in_endofpacket    (rsp_demux_009_src0_endofpacket),                       //              .endofpacket
		.in_channel        (rsp_demux_009_src0_channel),                           //              .channel
		.in_data           (rsp_demux_009_src0_data),                              //              .data
		.out_ready         (crosser_012_out_ready),                                //           out.ready
		.out_valid         (crosser_012_out_valid),                                //              .valid
		.out_startofpacket (crosser_012_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_012_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_012_out_channel),                              //              .channel
		.out_data          (crosser_012_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (11),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_013 (
		.in_clk            (clk_1_clk_clk),                                        //        in_clk.clk
		.in_reset          (modular_adc_0_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_0_c0_clk),                                      //       out_clk.clk
		.out_reset         (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (rsp_demux_010_src0_ready),                             //            in.ready
		.in_valid          (rsp_demux_010_src0_valid),                             //              .valid
		.in_startofpacket  (rsp_demux_010_src0_startofpacket),                     //              .startofpacket
		.in_endofpacket    (rsp_demux_010_src0_endofpacket),                       //              .endofpacket
		.in_channel        (rsp_demux_010_src0_channel),                           //              .channel
		.in_data           (rsp_demux_010_src0_data),                              //              .data
		.out_ready         (crosser_013_out_ready),                                //           out.ready
		.out_valid         (crosser_013_out_valid),                                //              .valid
		.out_startofpacket (crosser_013_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_013_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_013_out_channel),                              //              .channel
		.out_data          (crosser_013_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (altpll_0_c2_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                             //         .error
	);

	core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (altpll_0_c2_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (sysid_qsys_0_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_0_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysid_qsys_0_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                      //         .error
	);

	core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (altpll_0_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_flash_0_csr_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (onchip_flash_0_csr_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (onchip_flash_0_csr_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)               //         .error
	);

	core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (altpll_0_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_flash_0_data_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (onchip_flash_0_data_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (onchip_flash_0_data_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)               //         .error
	);

	core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (altpll_0_c0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                        //         .error
	);

	core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (altpll_0_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory2_0_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (onchip_memory2_0_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (onchip_memory2_0_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)               //         .error
	);

	core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (altpll_0_c2_clk),                               // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (slide_pio_s1_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (slide_pio_s1_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (slide_pio_s1_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)              //         .error
	);

	core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (altpll_0_c2_clk),                               // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_0_s1_agent_rdata_fifo_out_data),          //     in_0.data
		.in_0_valid     (timer_0_s1_agent_rdata_fifo_out_valid),         //         .valid
		.in_0_ready     (timer_0_s1_agent_rdata_fifo_out_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)              //         .error
	);

	core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (altpll_0_c2_clk),                               // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_0_s1_agent_rdata_fifo_out_data),            //     in_0.data
		.in_0_valid     (pio_0_s1_agent_rdata_fifo_out_valid),           //         .valid
		.in_0_ready     (pio_0_s1_agent_rdata_fifo_out_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)              //         .error
	);

	core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_1_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (modular_adc_0_reset_sink_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (modular_adc_0_sample_store_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (modular_adc_0_sample_store_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (modular_adc_0_sample_store_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                          //         .error
	);

	core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_1_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (modular_adc_0_reset_sink_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (modular_adc_0_sequencer_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (modular_adc_0_sequencer_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (modular_adc_0_sequencer_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                       //         .error
	);

endmodule
